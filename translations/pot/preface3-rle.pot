# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/preface3-rle.rst:11
# 78f6f0fb0a354cd7a742cbfbec13a33f
msgid "The Rhodes Local Edition (RLE) (Version of October, 2011)"
msgstr ""

#: ../../source/preface3-rle.rst:13
# d09efe2cfacf4340a463bc5eb3fa692b
msgid "By Peter Wentworth"
msgstr ""

#: ../../source/preface3-rle.rst:17
# 53012140e84348c8a1e215bc0ec5c703
msgid "We switched from Java to Python in our introductory courses in 2010. So far we think the results look positive. More time will tell."
msgstr ""

#: ../../source/preface3-rle.rst:20
# 77dd6bc29d0a4d83a612e83cfcbd3132
msgid "This predecessor to this book was a great starting point for us, especially because of the liberal permission to change things.  Having our own in-house course notes or handouts allows us to adapt and stay fresh, rearrange, see what works, and it gives us agility.  We can also ensure that every student in the course gets a copy of the handouts --- something that doesn't always happen if we prescribe costly textbooks."
msgstr ""

#: ../../source/preface3-rle.rst:28
# fc69e6d5e7574a79b3f21c04583438e9
msgid "Many thanks to all the contributors and the authors for making their hard work available to the Python community and to our students."
msgstr ""

#: ../../source/preface3-rle.rst:31
# e0f7212cbf124032879f7f0fbcbedb25
msgid "A colleague and friend, Peter Warren, once made the remark that learning introductory programming is as much about the environment as it is about the programming language."
msgstr ""

#: ../../source/preface3-rle.rst:35
# e90ebf4e3a694efbb00f92518aa60f67
msgid "I'm a big fan of IDEs (Integrated Development Environments). I want help to be integrated into my editor, as a first-class citizen, available at the press of a button. I want syntax highlighting. I want immediate syntax checking, and sensible autocompletion."
msgstr ""

#: ../../source/preface3-rle.rst:40
# 2ac78d74859b4d3c84353cf01edc5f8f
msgid "I'm especially keen on having a single-stepping debugger and breakpoints with code inspection built in.  We're trying to build a conceptual model of program execution in the student's mind, so I find most helpful for teaching to have the call stack and variables explicitly visible, and to be able to immediately inspect the result of executing a statement."
msgstr ""

#: ../../source/preface3-rle.rst:47
# 89cbf7401aba4776aa839ea5a0768eff
msgid "My philosophy, then, is not to look for a language to teach, but to look for a combination of IDE and language that are packaged together, and evaluated as a whole."
msgstr ""

#: ../../source/preface3-rle.rst:51
# f1aead25cad34003981c5eba06a7ae89
msgid "I've made some quite deep changes to the original book to reflect this (and various other opinionated views that I hold), and I have no doubt that more changes will follow as we bed down our course."
msgstr ""

#: ../../source/preface3-rle.rst:55
# 24d708512a3a45519cc0a44205e6ad00
msgid "Here are some of the key things I've approached differently:"
msgstr ""

#: ../../source/preface3-rle.rst:57
# 778dd5ecc79d48848ecd32e064a7851e
msgid "Our local situation demands that we have a large number of service course students in an introductory course of just 3 or 4 weeks, and then we get another semester of teaching with those going into our mainstream program. So the book is in two parts: we'll do the first five chapters in the big \"get your toes wet\" course, and the rest of the material in a separate semester."
msgstr ""

#: ../../source/preface3-rle.rst:63
# 2fd9132670334cb0920d03cdc74eb9d6
msgid "We're using Python 3.  It is cleaner, more object oriented, and has fewer ad-hoc irregularities than earlier versions of Python."
msgstr ""

#: ../../source/preface3-rle.rst:65
# cb921c15b643491bac65ffd036580160
msgid "We're using PyScripter as our IDE, on Windows.  And it is hardwired into parts of these notes, with screenshots, etc."
msgstr ""

#: ../../source/preface3-rle.rst:67
# faeeb8acca0443249a77f9f801131994
msgid "I've dropped GASP."
msgstr ""

#: ../../source/preface3-rle.rst:68
# eea8939dbd904b0baa2d853f8d5e6215
msgid "For graphics we start with the Turtle module. As things move along, we use PyGame for more advanced graphics."
msgstr ""

#: ../../source/preface3-rle.rst:70
# 014e9e5813964e08bba2b96499930843
msgid "I've introduced some event-driven programming using the turtle."
msgstr ""

#: ../../source/preface3-rle.rst:71
# 566ef4a6d4a84313a64b04087c8cc812
msgid "I have tried to push more object-oriented notions earlier, without asking students to synthesize objects or write their own classes.  So, for example, in the chapter about the turtle, we create multiple instances of turtles, talk about their attributes and state (color, position, etc), and favour method-call style to move them around, i.e.  ``tess.forward(100)``.  Similarly, when we use random numbers, we avoid the \"hidden singleton generator\" in the random module --- we rather create an instance of a generator, and invoke methods on the instance."
msgstr ""

#: ../../source/preface3-rle.rst:79
# ff17e0aa85e441b2be65baab4fd2b5f7
msgid "The ease of constructing lists and the ``for`` loop seem to be winners in Python, so rather than use the traditional command-line ``input`` for data, I've favoured using loops and lists right up front, like this:"
msgstr ""

#: ../../source/preface3-rle.rst:91
# a06822bb37dd450bb513a508b61de2db
msgid "This also means that I bumped ``range`` up for early exposure. I envisage that over time we'll see more opportunities to exploit \"early lists, early iteration\" in its most simple form."
msgstr ""

#: ../../source/preface3-rle.rst:94
# 30e75986055a472da2137503fa87156d
msgid "I dumped ``doctest`` : it is a bit too quirky for my liking.  For example, it fails a test if the spacing between list elements is not precisely the same as the output string, or if Python prints a string with single quotes, but you wrote up the test case with double quotes. Cases like this also confused students (and instructors) quite badly:"
msgstr ""

#: ../../source/preface3-rle.rst:111
# 3a93f7cdb5da4675a0248f7a0a470427
msgid "If you can explain the difference in scope rules and lifetimes between the parameter ``xs`` and the doctest variable ``xs`` elegantly, please let me know.  Yes, I know doctest creates its own scope behind our back, but it is exactly this black magic that we're trying to avoid. From the usual indentation rules, also looks like the doctests are nested inside the function scope, but they are not. Students thought that the parameter had been given its value by the assignment to ``xs`` in the doctest!"
msgstr ""

#: ../../source/preface3-rle.rst:120
# 4d71586a43734e548f1e935612965bac
msgid "I also think that keeping the test suite separate from the functions under test leads to a cleaner relationship between caller and callee, and gives a better chance of getting argument passing / parameter concepts taught accurately."
msgstr ""

#: ../../source/preface3-rle.rst:124
# 4b5a743c27554f12b38cd28bc2c7ee92
msgid "There is a good unit testing module in Python, (and PyScripter offers integrated support for it, and automated generation of skeleton test modules), but it looked too advanced for beginners, because it requires multi-module concepts."
msgstr ""

#: ../../source/preface3-rle.rst:128
# 6cd8059d774144c181c7fbb583cb0e80
msgid "So I've favoured my own test scaffolding in Chapter 6 (about 10 lines of code) that the students must insert into whatever file they're working on."
msgstr ""

#: ../../source/preface3-rle.rst:131
# cf5bce55f9ea4ffab3ed8ed117a17047
msgid "I've played down command-line input / process / output where possible.  Many of our students have never seen a command-line shell, and it is arguably quite intimidating."
msgstr ""

#: ../../source/preface3-rle.rst:135
# b9a6ff51ed964a5da45f357e7fd6495b
msgid "We've gone back to a more \"classic / static\" approach to writing our own classes and objects. Python (in company with languages like Javascript, Ruby, Perl, PHP, etc.) don't really emphasize notions of \"sealed\" classes or \"private\" members, or even \"sealed instances\"."
msgstr ""

#: ../../source/preface3-rle.rst:140
# 4665c5835b1e4d8dabbdd1fb536abc1d
msgid "So one teaching approach is to allocate each instance as an empty container, and subsequently allow the external clients of the class to poke new members (methods or attributes) into different instances as they wish to. It is a very dynamic approach, but perhaps not one that encourages thinking in abstractions, layers, contracts, decoupling, etc. It might even be the kind of thing that one could write one of those *\"x,y,z ... considered harmful\"* papers about."
msgstr ""

#: ../../source/preface3-rle.rst:148
# d6878250d6714cdb8656b98b122a1e73
msgid "In our more conservative approach, we put an initializer into every class, we determine at object instantiation time what members we want, and we initialize the instances from within the class.  So we've moved closer in philosophy to C# / Java on this one."
msgstr ""

#: ../../source/preface3-rle.rst:153
# 398a3181c19f44b6843972274f9910ac
msgid "We're moving towards introducing more algorithms earlier into the course.  Python is an efficient teaching language --- we can make fast progress.  But the gains we make there we'd like to invest into deeper problem solving, and more complex algorithms with the basics, rather than cover  \"more Python features\". Some of these changes have started to find their way in this version, and I'm sure we'll see more in future."
msgstr ""

#: ../../source/preface3-rle.rst:160
# 53006b1b7872481788c412dd2315fbc5
msgid "We're interested in issues around teaching and learning. Some research indicates that \"intellectual playfulness\" is important.  The study referenced in the Odds-and-ends workbook at the end just didn't seem to have anywhere sensible to go in the book, yet I wanted it included.  It is quite likely that we'll allow more issues like this to creep into the book, to try to make it more than just about programming in Python."
msgstr ""

