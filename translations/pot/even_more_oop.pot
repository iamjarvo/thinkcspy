# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/even_more_oop.rst:13
# 287ac17f0ded487886157493be11e357
msgid "Even more OOP"
msgstr ""

#: ../../source/even_more_oop.rst:16
# 0af6e84dfd7f4843bf4b1b718a24108e
msgid "MyTime"
msgstr ""

#: ../../source/even_more_oop.rst:18
# ec992c76a9e647338ba2f5b57cd58899
msgid "As another example of a user-defined type, we'll define a class called ``MyTime`` that records the time of day. We'll provide an ``__init__`` method to ensure that every instance is created with appropriate attributes and initialization. The class definition looks like this:"
msgstr ""

#: ../../source/even_more_oop.rst:34
# a8786d71c4be4d80904104b91b90ef6e
msgid "We can instantiate a new ``MyTime`` object:"
msgstr ""

#: ../../source/even_more_oop.rst:42
# 7f4026ad04cc43dba4565ef4e29ec63b
msgid "The state diagram for the object looks like this:"
msgstr ""

#: ../../source/even_more_oop.rst:46
# 5b3c3bcf18154489bd16370a488c7001
msgid "We'll leave it as an exercise for the readers to add a ``__str__`` method so that MyTime objects can print themselves decently."
msgstr ""

#: ../../source/even_more_oop.rst:52
# f31372b5749c4b6ea2662ecf4fd461a6
msgid "Pure functions"
msgstr ""

#: ../../source/even_more_oop.rst:54
# 57b80908936f4813b692e61fec8e978b
msgid "In the next few sections, we'll write two versions of a function called ``add_time``, which calculates the sum of two ``MyTime`` objects. They will demonstrate two kinds of functions: pure functions and modifiers."
msgstr ""

#: ../../source/even_more_oop.rst:58
# c3fe5e9184314168a01f4178f267302b
msgid "The following is a rough version of ``add_time``:"
msgstr ""

#: ../../source/even_more_oop.rst:70
# 7437b5f19e924c6187271c36bcf18b49
msgid "The function creates a new ``MyTime`` object and returns a reference to the new object. This is called a **pure function** because it does not modify any of the objects passed to it as parameters and it has no side effects, such as updating global variables, displaying a value, or getting user input."
msgstr ""

#: ../../source/even_more_oop.rst:76
# c0b21e4d58bb4c7fad9c89b912067073
msgid "Here is an example of how to use this function. We'll create two ``MyTime`` objects: ``current_time``, which contains the current time; and ``bread_time``, which contains the amount of time it takes for a breadmaker to make bread. Then we'll use ``add_time`` to figure out when the bread will be done."
msgstr ""

#: ../../source/even_more_oop.rst:89
# cfdcc2cc4d4a459da1a7faad6c4b4eb7
msgid "The output of this program is ``12:49:30``, which is correct. On the other hand, there are cases where the result is not correct. Can you think of one?"
msgstr ""

#: ../../source/even_more_oop.rst:92
# bef03f30241a45df8ed1c1ae3f6c1c3f
msgid "The problem is that this function does not deal with cases where the number of seconds or minutes adds up to more than sixty. When that happens, we have to carry the extra seconds into the minutes column or the extra minutes into the hours column."
msgstr ""

#: ../../source/even_more_oop.rst:97
# b2074284417a4953b87f3ca1edc073d7
msgid "Here's a better version of the function:"
msgstr ""

#: ../../source/even_more_oop.rst:119
# 5f59ee7cfdf149a3b1a660dbee0fcefc
msgid "This function is starting to get bigger, and still doesn't work for all possible cases.  Later we will suggest an alternative approach that yields better code."
msgstr ""

#: ../../source/even_more_oop.rst:126
# 316ee4e8446146e79cbcbeeb47ff37d5
msgid "Modifiers"
msgstr ""

#: ../../source/even_more_oop.rst:128
# 6a48ba39a3ab41f4bdc6363f4ad9de2d
msgid "There are times when it is useful for a function to modify one or more of the objects it gets as parameters. Usually, the caller keeps a reference to the objects it passes, so any changes the function makes are visible to the caller. Functions that work this way are called **modifiers**."
msgstr ""

#: ../../source/even_more_oop.rst:133
# c7f1edb31cad4611b6a0c17bc57e3b1b
msgid "``increment``, which adds a given number of seconds to a ``MyTime`` object, would be written most naturally as a modifier. A rough draft of the function looks like this:"
msgstr ""

#: ../../source/even_more_oop.rst:151
# c4d3f5ddc24840b480f824a88ff947e1
msgid "The first line performs the basic operation; the remainder deals with the special cases we saw before."
msgstr ""

#: ../../source/even_more_oop.rst:154
# d370597ad82248178d1d0d129f32533f
msgid "Is this function correct? What happens if the parameter ``seconds`` is much greater than sixty? In that case, it is not enough to carry once; we have to keep doing it until ``seconds`` is less than sixty. One solution is to replace the ``if`` statements with ``while`` statements:"
msgstr ""

#: ../../source/even_more_oop.rst:173
# 9209c2f827bf49478884c465b87b1532
msgid "This function is now correct when seconds is not negative, and when hours does not exceed 23, but it is not a particularly good solution."
msgstr ""

#: ../../source/even_more_oop.rst:177
# 907bbd5048b14b14a5ad633799b6a171
msgid "Converting ``increment`` to a method"
msgstr ""

#: ../../source/even_more_oop.rst:179
# f12b810f0db54f7c81c6e397a0ac6da8
msgid "Once again, OOP programmers would prefer to put functions that work with ``MyTime`` objects into the ``MyTime`` class, so let's convert ``increment`` to a method. To save space, we will leave out previously defined methods, but you should keep them in your version:"
msgstr ""

#: ../../source/even_more_oop.rst:201
# 83fcb72e00e24ee8b3193f6538e41535
msgid "The transformation is purely mechanical - we move the definition into the class definition and (optionally) change the name of the first parameter to ``self``, to fit with Python style conventions."
msgstr ""

#: ../../source/even_more_oop.rst:205
# 0da674024c8b443cb2fef87a7659b1e0
msgid "Now we can invoke ``increment`` using the syntax for invoking a method."
msgstr ""

#: ../../source/even_more_oop.rst:212
# 46e6aaad37cf436aac59ef892008f14a
msgid "Again, the object on which the method is invoked gets assigned to the first parameter, ``self``. The second parameter, ``seconds`` gets the value ``500``."
msgstr ""

#: ../../source/even_more_oop.rst:216
# 9862b7362c3d4949b56bc75c2c670db3
msgid "An \"Aha!\" insight"
msgstr ""

#: ../../source/even_more_oop.rst:218
# 6dd7b324126a4e008f28dce4fb347870
msgid "Often a high-level insight into the problem can make the programming much easier."
msgstr ""

#: ../../source/even_more_oop.rst:220
# 5025fcbf623a4c6a9e9232cf52289c64
msgid "In this case, the insight is that a ``MyTime`` object is really a three-digit number in base 60! The ``second`` component is the ones column, the ``minute`` component is the sixties column, and the ``hour`` component is the thirty-six hundreds column."
msgstr ""

#: ../../source/even_more_oop.rst:225
# 26a07efc8e4744cea4c3ca484458d839
msgid "When we wrote ``add_time`` and ``increment``, we were effectively doing addition in base 60, which is why we had to carry from one column to the next."
msgstr ""

#: ../../source/even_more_oop.rst:228
# 8455374433ba4ec9a527052122377796
msgid "This observation suggests another approach to the whole problem --- we can convert a ``MyTime`` object into a single number and take advantage of the fact that the computer knows how to do arithmetic with numbers.  The following method is added to the ``MyTime`` class to convert any instance into a corresponding number of seconds:"
msgstr ""

#: ../../source/even_more_oop.rst:247
# eff931dca7bf413db1ba51e10b74adf7
msgid "Now, all we need is a way to convert from an integer back to a ``MyTime`` object. Supposing we have ``tsecs`` seconds, some integer division and mod operators can do this for us:"
msgstr ""

#: ../../source/even_more_oop.rst:259
# 492c92ab60874ec8b52815d9db9831aa
msgid "You might have to think a bit to convince yourself that this technique to convert from one base to another is correct."
msgstr ""

#: ../../source/even_more_oop.rst:262
# 225aca4bc73a4f4eb0f46ff6de1192bc
msgid "In OOP we're really trying to wrap together the data and the operations that apply to it.  So we'd like to have this logic inside the ``MyTime`` class.  A good solution is to rewrite the class initializer so that it can cope with initial values of seconds or minutes that are outside the **normalized** values.  (A normalized time would be something like 3 hours 12 minutes and 20 seconds.  The same time, but unnormalized could be 2 hours 70 minutes and 140 seconds.)"
msgstr ""

#: ../../source/even_more_oop.rst:270
# ff5d704c26424b41bc21738df841ef46
msgid "Let's rewrite a more powerful initializer for ``MyTime``:"
msgstr ""

#: ../../source/even_more_oop.rst:291
# 4a8e7700395345e49be67500a86e0184
msgid "Now we can rewrite ``add_time`` like this:"
msgstr ""

#: ../../source/even_more_oop.rst:300
# cd6847bee8804c83a482aeb26a886f59
msgid "This version is much shorter than the original, and it is much easier to demonstrate or reason that it is correct."
msgstr ""

#: ../../source/even_more_oop.rst:306
# e6f93d7e0d6b493ab58f0aef0d266654
msgid "Generalization"
msgstr ""

#: ../../source/even_more_oop.rst:308
# 4486bfc7eeb54e5fb3acae9b0213575e
msgid "In some ways, converting from base 60 to base 10 and back is harder than just dealing with times. Base conversion is more abstract; our intuition for dealing with times is better."
msgstr ""

#: ../../source/even_more_oop.rst:312
# d11fce5b80434f7a8cfee088e216beed
msgid "But if we have the insight to treat times as base 60 numbers and make the investment of writing the conversions, we get a program that is shorter, easier to read and debug, and more reliable."
msgstr ""

#: ../../source/even_more_oop.rst:316
# af4250a22ec545589b092ebc5a613a9f
msgid "It is also easier to add features later. For example, imagine subtracting two ``MyTime`` objects to find the duration between them. The naive approach would be to implement subtraction with borrowing. Using the conversion functions would be easier and more likely to be correct."
msgstr ""

#: ../../source/even_more_oop.rst:321
# a3b877ea30694cbaa0c2034cda278f53
msgid "Ironically, sometimes making a problem harder (or more general) makes the programming easier, because there are fewer special cases and fewer opportunities for error."
msgstr ""

#: ../../source/even_more_oop.rst:327
# 50757cf977104a3c9ac883a4be0d4d4a
msgid "Computer Scientists are generally fond of specializing their types, while mathematicians often take the opposite approach, and generalize everything."
msgstr ""

#: ../../source/even_more_oop.rst:330
# 88a42cd09939466e9e3239cc830231a5
msgid "What do we mean by this?"
msgstr ""

#: ../../source/even_more_oop.rst:332
# 60dc5f1fc9294a43a57b6db7aea33b2a
msgid "If you ask a mathematician to solve a problem involving weekdays, days of the century, playing cards, time, or dominoes, their most likely response is to observe that all these objects can be represented by integers. Playing cards, for example, can be numbered from 0 to 51.  Days within the century can be numbered. Mathematicians will say *\"These things are enumerable --- the elements can be uniquely numbered (and we can reverse this numbering to get back to the original concept). So let's number them, and confine our thinking to integers.  Luckily, we have powerful techniques and a good understanding of integers, and so our abstractions --- the way we tackle and simplify these problems --- is to try to reduce them to problems about integers.\"*"
msgstr ""

#: ../../source/even_more_oop.rst:342
# 41508b649cbc44aa93ae543f10187fbc
msgid "Computer Scientists tend to do the opposite.  We will argue that there are many integer operations that are simply not meaningful for dominoes, or for days of the century.  So we'll often define new specialized types, like ``MyTime``, because we can restrict, control, and specialize the operations that are possible.  Object-oriented programming is particularly popular because it gives us a good way to bundle methods and specialized data into a new type."
msgstr ""

#: ../../source/even_more_oop.rst:349
# f650437dc52f48c784041d28b965f922
msgid "Both approaches are powerful problem-solving techniques. Often it may help to try to think about the problem from both points of view --- *\"What would happen if I tried to reduce everything to very few primitive types?\"*, versus *\"What would happen if this thing had its own specialized type?\"*"
msgstr ""

#: ../../source/even_more_oop.rst:356
# bff250d547114bbe87e7d7dfbe9753a2
msgid "Another example"
msgstr ""

#: ../../source/even_more_oop.rst:358
# f7d839486f344262b7efd57bffe14f02
msgid "The ``after`` function should compare two times, and tell us whether the first time is strictly after the second, e.g."
msgstr ""

#: ../../source/even_more_oop.rst:368
# 9575922fc6534e22b29580b726e9bd3a
msgid "This is slightly more complicated because it operates on two ``MyTime`` objects, not just one.  But we'd prefer to write it as a method anyway --- in this case, a method on the first argument:"
msgstr ""

#: ../../source/even_more_oop.rst:394
# d9539f4489a2475584dba945a4aa89b7
msgid "We invoke this method on one object and pass the other as an argument:"
msgstr ""

#: ../../source/even_more_oop.rst:402
# 88d4bb03d6e84ceca83116b66ea6cbf8
msgid "You can almost read the invocation like English: If the current time is after the done time, then..."
msgstr ""

#: ../../source/even_more_oop.rst:405
# b03bb37080fc4ffc9c048fa289fac0c1
msgid "The logic of the ``if`` statements deserve special attention here.   Lines 11-18 will only be reached if the two hour fields are the same.  Similarly, the test at line 16 is only executed if both times have the same hours and the same minutes."
msgstr ""

#: ../../source/even_more_oop.rst:409
# b785b0df95734f318b0c0aa3a76586d0
msgid "Could we make this easier by using our \"Aha!\" insight and extra work from earlier, and reducing both times to integers?   Yes, with spectacular results!"
msgstr ""

#: ../../source/even_more_oop.rst:422
# eed7b00d851d444b84a90cdd4399ccf1
msgid "This is a great way to code this: if you want to tell if the first time is after the second time, turn them both into integers and compare the integers."
msgstr ""

#: ../../source/even_more_oop.rst:427
# 32411e82a9184c7a9bfcbeef8ae86c7e
msgid "Operator overloading"
msgstr ""

#: ../../source/even_more_oop.rst:429
# 902d62cec97745699f7cb22addc53c1c
msgid "Some languages, including Python, make it possible to have different meanings for the same operator when applied to different types.  For example, ``+`` in Python means quite different things for integers and for strings.  This feature is called **operator overloading**."
msgstr ""

#: ../../source/even_more_oop.rst:434
# 7341b44a26d44de68b1cbd51b1c1beeb
msgid "It is especially useful when programmers can also overload the operators for their own user-defined types."
msgstr ""

#: ../../source/even_more_oop.rst:437
# 32996b2094a14dbeafcae378fd2e6f3a
msgid "For example, to override the addition operator ``+``, we can provide a method named ``__add__``:"
msgstr ""

#: ../../source/even_more_oop.rst:449
# 06181cba7be34672a7081ec4a02110cd
msgid "As usual, the first parameter is the object on which the method is invoked. The second parameter is conveniently named ``other`` to distinguish it from ``self``.  To add two ``MyTime`` objects, we create and return a new ``MyTime`` object that contains their sum."
msgstr ""

#: ../../source/even_more_oop.rst:454
# 15e63e6daba04b8393e7bf310556c052
msgid "Now, when we apply the ``+`` operator to ``MyTime`` objects, Python invokes the ``__add__`` method that we have written:"
msgstr ""

#: ../../source/even_more_oop.rst:465
# 515a51db29c445b787ddb0085399225d
msgid "The expression ``t1 + t2`` is equivalent to ``t1.__add__(t2)``, but obviously more elegant.  As an exercise, add a method ``__sub__(self, other)`` that overloads the subtraction operator, and try it out."
msgstr ""

#: ../../source/even_more_oop.rst:469
# ae642b56f2de468eb6ad06b32cdb25c7
msgid "For the next couple of exercises we'll go back to the Point class defined in our first chapter about objects, and overload some of its operators.   Firstly, adding two points adds their respective (x, y) coordinates:"
msgstr ""

#: ../../source/even_more_oop.rst:482
# 0a98103f059749c7ba2fd6f274469706
msgid "There are several ways to override the behavior of the multiplication operator: by defining a method named ``__mul__``, or ``__rmul__``, or both."
msgstr ""

#: ../../source/even_more_oop.rst:486
# e9deb8a408bc4bf6bfe704b15d4268d8
msgid "If the left operand of ``*`` is a ``Point``, Python invokes ``__mul__``, which assumes that the other operand is also a ``Point``. It computes the **dot product** of the two Points, defined according to the rules of linear algebra:"
msgstr ""

#: ../../source/even_more_oop.rst:497
# 8aff7044858e4041b3319a6abea23810
msgid "If the left operand of ``*`` is a primitive type and the right operand is a ``Point``, Python invokes ``__rmul__``, which performs **scalar multiplication**:"
msgstr ""

#: ../../source/even_more_oop.rst:507
# 209aff0c319040a594030c263a269cee
msgid "The result is a new ``Point`` whose coordinates are a multiple of the original coordinates. If ``other`` is a type that cannot be multiplied by a floating-point number, then ``__rmul__`` will yield an error."
msgstr ""

#: ../../source/even_more_oop.rst:511
# 4809e9197f5244e5a4110c485b5285cf
msgid "This example demonstrates both kinds of multiplication:"
msgstr ""

#: ../../source/even_more_oop.rst:522
# b092d3409f7d448cbd0a0d2fe8ebc523
msgid "What happens if we try to evaluate ``p2 * 2``? Since the first parameter is a ``Point``, Python invokes ``__mul__`` with ``2`` as the second argument. Inside ``__mul__``, the program tries to access the ``x`` coordinate of ``other``, which fails because an integer has no attributes:"
msgstr ""

#: ../../source/even_more_oop.rst:532
# b8d6a9f1573542748831f086e7acb556
msgid "Unfortunately, the error message is a bit opaque. This example demonstrates some of the difficulties of object-oriented programming.  Sometimes it is hard enough just to figure out what code is running."
msgstr ""

#: ../../source/even_more_oop.rst:537
# 4918a6d7814048bdbb067774e38d5ca9
msgid "Polymorphism"
msgstr ""

#: ../../source/even_more_oop.rst:539
# 2b31c2f71f924cc786fee81a59ee2e54
msgid "Most of the methods we have written only work for a specific type.  When you create a new object, you write methods that operate on that type."
msgstr ""

#: ../../source/even_more_oop.rst:542
# 7eecf55a7b674802ab2a88b47afa08d2
msgid "But there are certain operations that you will want to apply to many types, such as the arithmetic operations in the previous sections. If many types support the same set of operations, you can write functions that work on any of those types."
msgstr ""

#: ../../source/even_more_oop.rst:547
# 6060d4c1db3f460c9eba2b99a0d5694f
msgid "For example, the ``multadd`` operation (which is common in linear algebra) takes three parameters; it multiplies the first two and then adds the third. We can write it in Python like this:"
msgstr ""

#: ../../source/even_more_oop.rst:557
# 986247cc7f6343389915896a6875c14e
msgid "This function will work for any values of ``x`` and ``y`` that can be multiplied and for any value of ``z`` that can be added to the product."
msgstr ""

#: ../../source/even_more_oop.rst:560
# 848257c0402b485983d09417b40ad1f3
msgid "We can invoke it with numeric values:"
msgstr ""

#: ../../source/even_more_oop.rst:567
# 581209ed2f494ecc9ae8f6e2e7189d61
msgid "Or with ``Point``\\s:"
msgstr ""

#: ../../source/even_more_oop.rst:578
# 2603f513d8c041cd8ef120bbf4cec1dd
msgid "In the first case, the ``Point`` is multiplied by a scalar and then added to another ``Point``. In the second case, the dot product yields a numeric value, so the third parameter also has to be a numeric value."
msgstr ""

#: ../../source/even_more_oop.rst:582
# 160f321cd4344d4f9addb64e35954558
msgid "A function like this that can take arguments with different types is called **polymorphic**."
msgstr ""

#: ../../source/even_more_oop.rst:585
# bf0a78063c5d42a38e31fb2d329f64fb
msgid "As another example, consider the function ``front_and_back``, which prints a list twice, forward and backward:"
msgstr ""

#: ../../source/even_more_oop.rst:597
# 18cc5df2848c4b16b431750f18e20528
msgid "Because the ``reverse`` method is a modifier, we make a copy of the list before reversing it. That way, this function doesn't modify the list it gets as a parameter."
msgstr ""

#: ../../source/even_more_oop.rst:601
# 8ff9f3ecce044deeacc2cbb09a42b0ff
msgid "Here's an example that applies ``front_and_back`` to a list:"
msgstr ""

#: ../../source/even_more_oop.rst:609
# f611f81aafad48da92f6bbd77e0ea2dc
msgid "Of course, we intended to apply this function to lists, so it is not surprising that it works. What would be surprising is if we could apply it to a ``Point``."
msgstr ""

#: ../../source/even_more_oop.rst:612
# cb459dc5d54147fabd90b7ec33f7ec97
msgid "To determine whether a function can be applied to a new type, we apply Python's fundamental rule of polymorphism, called the **duck typing rule**: *If all of the operations inside the function can be applied to the type, the function can be applied to the type.* The operations in the ``front_and_back`` function include ``copy``, ``reverse``, and ``print``."
msgstr ""

#: ../../source/even_more_oop.rst:618
# 5f932371e8a0467e9dc3dc4c9159e826
msgid "Not all programming languages define polymorphism in this way. Look up *duck typing*, and see if you can figure out why it has this name."
msgstr ""

#: ../../source/even_more_oop.rst:621
# ffa1102d99764914ad18b180fa992a4b
msgid "``copy`` works on any object, and we have already written a ``__str__`` method for ``Point`` objects, so all we need is a ``reverse`` method in the ``Point`` class:"
msgstr ""

#: ../../source/even_more_oop.rst:630
# 6dc2ec83f44b4407b3de5277d8500102
msgid "Then we can pass ``Point``\\s to ``front_and_back``:"
msgstr ""

#: ../../source/even_more_oop.rst:638
# b932403b66c84f8886813c3f2fa27b82
msgid "The most interesting polymorphism is the unintentional kind, where you discover that a function you have already written can be applied to a type for which you never planned."
msgstr ""

#: ../../source/even_more_oop.rst:643
# 62e8307a5542456db40f3a17791f9256
msgid "Glossary"
msgstr ""

#: ../../source/even_more_oop.rst:649
# 60190e7b50954477bc301c473338d72d
msgid "An operation defined in linear algebra that multiplies two ``Point``\\s and yields a numeric value."
msgstr ""

#: ../../source/even_more_oop.rst:653
# 075649b7141d4cb89683f1ce205d1cdb
msgid "A style of program design in which the majority of functions are pure."
msgstr ""

#: ../../source/even_more_oop.rst:656
# c7b06b567683433b84ad56222c3cc494
msgid "A function or method that changes one or more of the objects it receives as parameters. Most modifier functions are void (do not return a value)."
msgstr ""

#: ../../source/even_more_oop.rst:660
# 5aeda540e08749fea11580c937068fd4
msgid "Data is said to be normalized if it fits into some reduced range or set of rules. We usually normalize our angles to values in the range [0..360). We normalize minutes and seconds to be values in the range [0..60).  And we'd be surprised if the local store advertised its cold drinks at \"One dollar, two hundred and fifty cents\"."
msgstr ""

#: ../../source/even_more_oop.rst:667
# c948b24052fb4e0998bc7509e3d338cf
msgid "Extending built-in operators ( ``+``, ``-``, ``*``, ``>``, ``<``, etc.) so that they do different things for different types of arguments. We've seen early in the book how ``+`` is overloaded for numbers and strings, and here we've shown how to further overload it for user-defined types."
msgstr ""

#: ../../source/even_more_oop.rst:673
# 0d4d7e8896e44ce5899a0ff20e642ae6
msgid "A function that can operate on more than one type.  Notice the subtle distinction: overloading has different functions (all with the same name) for different types, whereas a polymorphic function is a single function that can work for a range of types."
msgstr ""

#: ../../source/even_more_oop.rst:679
# 8ee9c2476ff6432fb549ec9d927a871d
msgid "A function that does not modify any of the objects it receives as parameters. Most pure functions are fruitful rather than void."
msgstr ""

#: ../../source/even_more_oop.rst:683
# 21aa6c4063744b47b21d3d00bcd39ed6
msgid "An operation defined in linear algebra that multiplies each of the coordinates of a ``Point`` by a numeric value."
msgstr ""

#: ../../source/even_more_oop.rst:688
# 8abff1e021f748f78f11f5125ccd3bed
msgid "Exercises"
msgstr ""

#: ../../source/even_more_oop.rst:690
# 479050ac96374041bad3199d6646da35
msgid "Write a boolean function ``between`` that takes two ``MyTime`` objects, ``t1`` and ``t2``, as arguments, and returns ``True`` if the invoking object falls between the two times.  Assume ``t1 <= t2``, and make the test closed at the lower bound and open at the upper bound, i.e. return True if ``t1 <= obj < t2``."
msgstr ""

#: ../../source/even_more_oop.rst:696
# 4fe26284c2304bcb9501848da1c66689
msgid "Turn the above function into a method in the ``MyTime`` class."
msgstr ""

#: ../../source/even_more_oop.rst:698
# 3f88dcdf352f42a2ae642754443ea55f
msgid "Overload the necessary operator(s) so that instead of having to write ::"
msgstr ""

#: ../../source/even_more_oop.rst:702
# 4c5cefddf6424daf95fb3cb54915650a
msgid "we can use the more convenient ::"
msgstr ""

#: ../../source/even_more_oop.rst:706
# 180020e49bee45bd9a17fe314d22dbbd
msgid "Rewrite ``increment`` as a method that uses our \"Aha\" insight."
msgstr ""

#: ../../source/even_more_oop.rst:708
# d9334ec148a7433c8d5bc027b22821cb
msgid "Create some test cases for the ``increment`` method.   Consider specifically the case where the number of seconds to add to the time is negative.  Fix up ``increment`` so that it handles this case if it does not do so already. (You may assume that you will never subtract more seconds than are in the time object.)"
msgstr ""

#: ../../source/even_more_oop.rst:714
# 9b4437104f7f417d924f3f087943080a
msgid "Can physical time be negative, or must time always move in the forward direction? Some serious physicists think this is not such a dumb question. See what you can find on the Internet about this."
msgstr ""

