# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/exceptions.rst:12
# b0bf826de98e4e6db67d17825e029b72
msgid "Exceptions"
msgstr ""

#: ../../source/exceptions.rst:18
# c3d199a7e4374ecfbebbe10582e915e4
msgid "Catching exceptions"
msgstr ""

#: ../../source/exceptions.rst:20
# 38472067285d462c8d20d6b107b949ce
msgid "Whenever a runtime error occurs, it creates an **exception** object. The program stops running at this point and Python prints out the traceback, which ends with a message describing the exception that occurred."
msgstr ""

#: ../../source/exceptions.rst:24
# da9ac586267d4248ae7a03d7a4d2f4b0
msgid "For example, dividing by zero creates an exception:"
msgstr ""

#: ../../source/exceptions.rst:34
# 74c5a083f53f4ed599629f8bbb46a4a6
msgid "So does accessing a non-existent list item:"
msgstr ""

#: ../../source/exceptions.rst:45
# bc24a021e2e94180aa0ea2a4e0cd8303
msgid "Or trying to make an item assignment on a tuple:"
msgstr ""

#: ../../source/exceptions.rst:56
# 09152841b99f43c9b61c4de7dd1806e6
msgid "In each case, the error message on the last line has two parts: the type of error before the colon, and specifics about the error after the colon."
msgstr ""

#: ../../source/exceptions.rst:59
# ab23e65d88f5481c8787d8fb56bd09ac
msgid "Sometimes we want to execute an operation that might cause an exception, but we don't want the program to stop. We can **handle the exception** using the ``try`` statement to \"wrap\" a region of code."
msgstr ""

#: ../../source/exceptions.rst:63
# ce34947a92544556b1a3008d1570eba8
msgid "For example, we might prompt the user for the name of a file and then try to open it. If the file doesn't exist, we don't want the program to crash; we want to handle the exception:"
msgstr ""

#: ../../source/exceptions.rst:76
# 3018b6c8c8be4783a5c0452b35c38b72
msgid "The ``try`` statement has three separate clauses, or parts, introduced by the keywords ``try`` ... ``except`` ... ``finally``. The ``finally`` clause can be omitted, so we'll consider the two-clause version of the ``try`` statement first."
msgstr ""

#: ../../source/exceptions.rst:81
# 2e9a53b6c03f4eaba95cfad0008e17b7
msgid "The ``try`` statement executes and monitors the statements in the first block. If no exceptions occur, it skips the block under the ``except`` clause. If any exception occurs, it executes the statements in the ``except`` clause and then continues."
msgstr ""

#: ../../source/exceptions.rst:85
# ed53e2051baa445b8bc25547210a48e2
msgid "We could encapsulate this capability in a function: ``exists`` which takes a filename and returns true if the file exists, false if it doesn't:"
msgstr ""

#: ../../source/exceptions.rst:101
# fa38680a80f34cdca8b3f575d870c1f1
msgid "The function we've just shown is not one we'd recommend. It opens and closes the file, which is semantically different from asking \"does it exist?\". How?  Firstly, it might update some timestamps on the file. Secondly, it might tell you that there is no such file if some other program already happens to have the file open, or if your permissions settings don't allow you to open the file."
msgstr ""

#: ../../source/exceptions.rst:108
# e92685236c5e4d288e60259e51a4c58c
msgid "Python provides a module called ``os.path`` within the ``os`` module. It provides a number of useful functions to work with paths, files and directories, so you should check out the help."
msgstr ""

#: ../../source/exceptions.rst:123
# 6d8a1be1e20341b2adb400171c27c1db
msgid "You can use multiple ``except`` clauses to handle different kinds of exceptions (see the `Errors and Exceptions <http://docs.python.org/tut/node10.html>`__ lesson from Python creator Guido van Rossum's `Python Tutorial <http://docs.python.org/tut/tut.html>`__ for a more complete discussion of exceptions).  So your program could do one thing if the file does not exist, but do something else if the file was in use by another program."
msgstr ""

#: ../../source/exceptions.rst:131
# b6ed9e28d65c4dd1bb1033fab93a2924
msgid "Raising your own exceptions"
msgstr ""

#: ../../source/exceptions.rst:133
# cee7a46b55b847f7b40b6fc374e4ee21
msgid "Can your program deliberately cause its own exceptions? If your program detects an error condition, you can **raise** an exception. Here is an example that gets input from the user and checks that the number is non-negative:"
msgstr ""

#: ../../source/exceptions.rst:150
# 0f3d9574d55847d8b4d048d2d2f1d97e
msgid "Line 5 creates an exception object, in this case, a ValueError object, which encapsulates your specific information about the error. Assume that in this case function ``A`` called ``B`` which called ``C`` which called ``D`` which called ``get_age``. The ``raise`` statement on line 6 carries this object out as a kind of \"return value\", and immediately exits from ``get_age()`` to its caller ``D``. Then ``D`` again exits to its caller ``C``, and  ``C`` exits to ``B`` and so on, each returning the exception object to their caller, until it encounters a ``try ... except`` that can handle the exception.   We call this \"unwinding the call stack\"."
msgstr ""

#: ../../source/exceptions.rst:161
# d2d6210942cf48d5b23a20afe47383d8
msgid "``ValueError`` is one of the built-in exception types which most closely matches the kind of error we want to raise. The complete listing of built-in exceptions is found in  the `Built-in Exceptions <http://docs.python.org/lib/module-exceptions.html>`__ section of the `Python Library Reference <http://docs.python.org/lib/>`__, again by Python's creator, Guido van Rossum."
msgstr ""

#: ../../source/exceptions.rst:168
# bbd92b475376474ebefe2ba8d9c98edd
msgid "If the function that called ``get_age`` (or its caller, or their caller, ...) handles the error, then the program can carry on running; otherwise, Python prints the traceback and exits:"
msgstr ""

#: ../../source/exceptions.rst:186
# 7a1c281c9b174e2587bc05a2fca6d511
msgid "The error message includes the exception type and the additional information that was provided when the exception object was first created."
msgstr ""

#: ../../source/exceptions.rst:189
# 08f0cebc643e445c8e5f2ac2ba6362c0
msgid "It is often the case that lines 5 and 6 (creating the exception object, then raising the exception) are combined into a single statement, but there are really two different and independent things happening, so perhaps it makes sense to keep the two steps separate when we first learn to work with exceptions. Here we show it all in a single statement:"
msgstr ""

#: ../../source/exceptions.rst:202
# d7a218fdecab42d7b44f280c96578328
msgid "Revisiting an earlier example"
msgstr ""

#: ../../source/exceptions.rst:204
# 5fa55750fe9243d284fb57916c534f7c
msgid "Using exception handling, we can now modify our ``recursion_depth`` example from the previous chapter so that it stops when it reaches the maximum recursion depth allowed:"
msgstr ""

#: ../../source/exceptions.rst:220
# 8ecc839323cb40a2a3a888737e919e76
msgid "Run this version and observe the results."
msgstr ""

#: ../../source/exceptions.rst:225
# a598ce404159401ea57a818a32dd99e0
msgid "The ``finally`` clause of the ``try`` statement"
msgstr ""

#: ../../source/exceptions.rst:227
# 4aa1b2033a6c4cbaa0383ac107119141
msgid "A common programming pattern is to grab a resource of some kind --- e.g. we create a window for turtles to draw on, or we dial up a connection to our internet service provider, or we may open a file for writing. Then we perform some computation which may raise an exception, or may work without any problems."
msgstr ""

#: ../../source/exceptions.rst:233
# 44095b03230c415ea5abdd435c4442c7
msgid "Whatever happens, we want to \"clean up\" the resources we grabbed --- e.g. close the window, disconnect our dial-up connection, or close the file.  The ``finally`` clause of the ``try`` statement is the way to do just this.  Consider this (somewhat contrived) example:"
msgstr ""

#: ../../source/exceptions.rst:264
# 1f0d6b881b4e4b35b38e5e4e6797319f
msgid "In lines 19-21, ``show_poly`` is called three times.  Each one creates a new window for its turtle, and draws a polygon with the number of sides input by the user.  But what if the user enters a string that cannot be converted to an ``int``?  What if they close the dialog?  We'll get an exception, *but even though we've had an exception, we still want to close the turtle's window*. Lines 16-17 does this for us.  Whether we complete the statements in the ``try`` clause successfully or not, the ``finally`` block will always be executed."
msgstr ""

#: ../../source/exceptions.rst:272
# ef9e1ebc4af34505ab202d60d76f473b
msgid "Notice that the exception is still unhandled --- only an ``except`` clause can handle an exception, so your program will still crash.  But at least its turtle window will be closed before it crashes!"
msgstr ""

#: ../../source/exceptions.rst:278
# ba77c1fcd17d4f1db5b2d408ea3fa0fb
msgid "Glossary"
msgstr ""

#: ../../source/exceptions.rst:283
# 76d252c8220f4c5ab1a82c14aa89dad4
msgid "An error that occurs at runtime."
msgstr ""

#: ../../source/exceptions.rst:286
# 5e3020c7e6bc45d2a952fd2dc1f63f51
msgid "To prevent an exception from causing your program to crash, by wrapping the block of code in a ``try`` / ``except`` construct."
msgstr ""

#: ../../source/exceptions.rst:290
# ade71dc9928e455fb09495515d736e35
msgid "A data type which cannot be modified.  Assignments to elements or slices (sub-parts) of immutable types cause a runtime error."
msgstr ""

#: ../../source/exceptions.rst:293
# bbf1260e786f437980651e3154b3d75c
msgid "able data type A data type which can be modified. All mutable types are compound types.  Lists and dictionaries (see next chapter) are mutable data types; strings and tuples are not."
msgstr ""

#: ../../source/exceptions.rst:299
# 4f5ce184f4ec4396b9924d2e76df5b7d
msgid "To create a deliberate exception by using the ``raise`` statement."
msgstr ""

#: ../../source/exceptions.rst:303
# aae102bd483c4199b1769eff786ef0d6
msgid "Exercises"
msgstr ""

#: ../../source/exceptions.rst:306
# 647d2572dcfe4405b0b32e38af5163d4
msgid "Write a function named ``readposint`` that uses the ``input`` dialog to prompt the user for a positive integer and then checks the input to confirm that it meets the requirements. It should be able to handle inputs that cannot be converted to int, as well as negative ints, and edge cases (e.g. when the user closes the dialog, or does not enter anything at all.)"
msgstr ""

