# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/functions.rst:13
#: ../../source/functions.rst:21
# 3819bddf1ed44a76b69d162c2d39fb84
# 4e9dde39a8e840499c564323aff29cc2
msgid "Functions"
msgstr ""

#: ../../source/functions.rst:24
# 8b2d0b4ef206478eafecf17378c53a50
msgid "In Python, a **function** is a named sequence of statements that belong together.  Their primary purpose is to help us organize programs into chunks that match how we think about the problem."
msgstr ""

#: ../../source/functions.rst:29
# 554fa565899f48dab0f6095dfa9f4449
msgid "The syntax for a **function definition** is:"
msgstr ""

#: ../../source/functions.rst:36
# 0827f8c805564da5b40d5d6a35368d41
msgid "We can make up any names we want for the functions we create, except that we can't use a name that is a Python keyword, and the names must follow the rules for legal identifiers."
msgstr ""

#: ../../source/functions.rst:40
# 855dce5c4a044364ac2c07c285e8d6ea
msgid "There can be any number of statements inside the function, but they have to be indented from the ``def``. In the examples in this book, we will use the standard indentation of four spaces. Function definitions are the second of several **compound statements** we will see, all of which have the same pattern:"
msgstr ""

#: ../../source/functions.rst:46
# 64816ed3d2194b279550ae4e7ebd4563
msgid "A header line which begins with a keyword and ends with a colon."
msgstr ""

#: ../../source/functions.rst:47
# b3e3e2e77a79405896fcb4b2ebb0c8be
msgid "A **body** consisting of one or more Python statements, each indented the same amount -- *4 spaces is the Python standard* -- from the header line."
msgstr ""

#: ../../source/functions.rst:51
# 357777b4a5254abd88b3c76f16460fea
msgid "We've already seen the `for` loop which follows this pattern."
msgstr ""

#: ../../source/functions.rst:53
# 5eca5b9ab5904cb99bfc1d886984829e
msgid "So looking again at the function definition, the keyword in the header is ``def``, which is followed by the name of the function and some *parameters* enclosed in parentheses. The parameter list may be empty, or it may contain any number of parameters separated from one another by commas. In either case, the parentheses are required. The parameters specifies what information, if any, we have to provide in order to use the new function."
msgstr ""

#: ../../source/functions.rst:59
# 9654eb24dc1e42328343a02d56dffbc0
msgid "Suppose we're working with turtles, and a common operation we need is to draw squares.   \"Draw a square* is an *abstraction*, or a mental chunk, of a number of smaller steps.  So let's write a function to capture the pattern of this \"building block\":"
msgstr ""

#: ../../source/functions.rst:89
# 89a08ff1c55646d8ab50a25db66fc86b
msgid "This function is named ``draw_square``.  It has two parameters --- one to tell the function which turtle to move around, and the other to tell it the size of the square we want drawn.   Make sure you know where the body of the function ends --- it depends on the indentation, and the blank lines don't count for this purpose!"
msgstr ""

#: ../../source/functions.rst:97
# a25b2c77c771498b9f2e57166dee45f2
msgid "If the first thing after the function header is a triple-quoted string, it is called a **docstring** and gets special treatment in Python and in some of the programming tools. For example, when using PyScripter, when we type a function name it will pop up a tooltip showing the parameters of the function, and the text from the docstring."
msgstr ""

#: ../../source/functions.rst:103
# 8569acea80704e9289ab77f0c28d145e
msgid "So the string we write as documentation at the start of a function is retrievable by python tools *at runtime*.  This is different from comments in our code, which are completely eliminated when the program is parsed."
msgstr ""

#: ../../source/functions.rst:107
# b6426b77315143ea872d5d7b933e9fc0
msgid "By convention, Python programmers use docstrings for the key documentation of their functions."
msgstr ""

#: ../../source/functions.rst:110
# c7a7308bc0c34a86a421b839de66aac1
msgid "Defining a new function does not make the function run. To do that we need a **function call**. We've already seen how to call some built-in functions like **print**, **range** and **int**. Function calls contain the name of the function being executed followed by a list of values, called *arguments*, which are assigned to the parameters in the function definition.  So in the second last line of the program, we call the function, and pass alex as the turtle to be manipulated, and 50 as the size of the square we want. While the function is executing, then, the variable ``sz`` refers to the value 50, and the variable ``t`` refers to the same turtle instance that the variable ``alex`` refers to."
msgstr ""

#: ../../source/functions.rst:120
# bd9e15bb3f2b464e9d7a8bc9aea93ba6
msgid "Once we've defined a function, we can call it as often as we like, and its statements will be executed each time we call it.  And we could use it to get any of our turtles to draw a square.   In the next example, we've changed the ``draw_square`` function a little, and we get tess to draw 15 squares, with some variations."
msgstr ""

#: ../../source/functions.rst:155
# 6479b0ee101d46e386e6b68f05641aa7
msgid "Functions can call other functions"
msgstr ""

#: ../../source/functions.rst:157
# af417f9094d744c89dc7a5f6ad84768d
msgid "Let's assume now we want a function to draw a rectangle.  We need to be able to call the function with different arguments for width and height.  And, unlike the case of the square, we cannot repeat the same thing 4 times, because the four sides are not equal."
msgstr ""

#: ../../source/functions.rst:161
# e6f891b589f948b5b548f3ec4dd822c8
msgid "So we eventually come up with this rather nice code that can draw a rectangle."
msgstr ""

#: ../../source/functions.rst:174
# fd11385a562343ecbedca3491fe6564f
msgid "The parameter names are deliberately chosen as single letters to ensure they're not misunderstood. In real programs, once we've had more experience, we will insist on better variable names than this. But the point is that the program doesn't \"understand\" that we're drawing a rectangle, or that the parameters represent the width and the height.  Concepts like rectangle, width, and height are the meaning we humans have, not concepts that the program or the computer understands."
msgstr ""

#: ../../source/functions.rst:180
# dbf58795383e451bb73f7f75b4b2fe50
msgid "*Thinking like a scientist* involves looking for patterns and relationships.  In the code above, we've done that to some extent.  We did not just draw four sides. Instead, we spotted that we could draw the rectangle as two halves, and used a loop to repeat that pattern twice."
msgstr ""

#: ../../source/functions.rst:185
# e70bbd7745e14d4180418589a1a7db01
msgid "But now we might spot that a square is a special kind of rectangle. We already have a function that draws a rectangle, so we can use that to draw our square."
msgstr ""

#: ../../source/functions.rst:195
# 3f14bfd01a2a43b298d3f1080b7c72da
msgid "There are some points worth noting here:"
msgstr ""

#: ../../source/functions.rst:197
# edf6bd7bfdfa4e1f96a8d04584079716
msgid "Functions can call other functions."
msgstr ""

#: ../../source/functions.rst:198
# 8b7b6b138c494f5daa5492450de9af09
msgid "Rewriting `draw_square` like this captures the relationship that we've spotted between squares and rectangles."
msgstr ""

#: ../../source/functions.rst:200
# 0cfc3e4fef3e44e8b281ce43f89c6eda
msgid "A caller of this function might say `draw_square(tess, 50)`.  The parameters of this function, ``tx`` and ``sz``, are assigned the values of the tess object, and the int 50 respectively."
msgstr ""

#: ../../source/functions.rst:203
# b3010fe13d3740009ff7062e525bcf64
msgid "In the body of the function they are just like any other variable."
msgstr ""

#: ../../source/functions.rst:204
# db1e3b589be041f6b791df046ce17390
msgid "When the call is made to `draw_rectangle`, the values in variables `tx` and `sz` are fetched first, then the call happens.  So as we enter the top of function `draw_rectangle`, its variable `t` is assigned the tess object, and `w` and `h` in that function are both given the value 50."
msgstr ""

#: ../../source/functions.rst:209
# 4a65fab64c8043a6849bf2b640e2ce60
msgid "So far, it may not be clear why it is worth the trouble to create all of these new functions. Actually, there are a lot of reasons, but this example demonstrates two:"
msgstr ""

#: ../../source/functions.rst:213
# 1b42d479fe5349cb9e4e4ee4cefb477d
msgid "Creating a new function gives us an opportunity to name a group of statements. Functions can simplify a program by hiding a complex computation behind a single command. The function (including its name) can capture our mental chunking, or *abstraction*, of the problem."
msgstr ""

#: ../../source/functions.rst:217
# 47dd78f0ca994034a01ba7ba2f67cc9d
msgid "Creating a new function can make a program smaller by eliminating repetitive code."
msgstr ""

#: ../../source/functions.rst:220
# 36ae24529d0f4a6a8ea0b4a88061df08
msgid "As we might expect, we have to create a function before we can execute it. In other words, the function definition has to be executed before the first time it is called."
msgstr ""

#: ../../source/functions.rst:227
# db06ffcd2c1c4a2e85ee02d38da22332
msgid "Flow of execution"
msgstr ""

#: ../../source/functions.rst:229
# 6a8bc5583e5646dd901d0bd1e4e32e4b
msgid "In order to ensure that a function is defined before its first use, we have to know the order in which statements are executed, which is called the **flow of execution**.   We've already talked about this a little in the previous chapter."
msgstr ""

#: ../../source/functions.rst:233
# 21dfd29f71f74ba2913e059e0547019a
msgid "Execution always begins at the first statement of the program.  Statements are executed one at a time, in order from top to bottom."
msgstr ""

#: ../../source/functions.rst:236
# 4628914d954540adbf30df8e5c3e427c
msgid "Function definitions do not alter the flow of execution of the program, but remember that statements inside the function are not executed until the function is called. Although it is not common, we can define one function inside another. In this case, the inner definition isn't executed until the outer function is called."
msgstr ""

#: ../../source/functions.rst:242
# b443c2034cf4453d8bd04672a31e5ba3
msgid "Function calls are like a detour in the flow of execution. Instead of going to the next statement, the flow jumps to the first line of the called function, executes all the statements there, and then comes back to pick up where it left off."
msgstr ""

#: ../../source/functions.rst:247
# 579e5050617740ae82b71b64325f10b4
msgid "That sounds simple enough, until we remember that one function can call another. While in the middle of one function, the program might have to execute the statements in another function. But while executing that new function, the program might have to execute yet another function!"
msgstr ""

#: ../../source/functions.rst:252
# e8a5daffac0545f2baaa5daa24c3b50c
msgid "Fortunately, Python is adept at keeping track of where it is, so each time a function completes, the program picks up where it left off in the function that called it. When it gets to the end of the program, it terminates."
msgstr ""

#: ../../source/functions.rst:256
# f3999660b3de4b31b6daa9f9875d801e
msgid "What's the moral of this sordid tale? When we read a program, don't read from top to bottom. Instead, follow the flow of execution."
msgstr ""

#: ../../source/functions.rst:263
# 201ef6b34a6746dfbf721a52e22a5080
msgid "In PyScripter, we can watch the flow of execution by \"single-stepping\" through any program.  PyScripter will highlight each line of code just before it is about to be executed."
msgstr ""

#: ../../source/functions.rst:267
# b240a4169e0a47a58f0339748564c0e1
msgid "PyScripter also lets us hover the mouse over any variable in the program, and it will pop up the current value of that variable. So this makes it easy to inspect the \"state snapshot\" of the program --- the current values that are assigned to the program's variables."
msgstr ""

#: ../../source/functions.rst:272
# fbed74b890c24571b00c44663029534a
msgid "This is a powerful mechanism for building a deep and thorough understanding of what is happening at each step of the way.  Learn to use the single-stepping feature well, and be mentally proactive:  as you work through the code, challenge yourself before each step: *\"What changes will this line make to any variables in the program?\"* and *\"Where will flow of execution go next?\"*"
msgstr ""

#: ../../source/functions.rst:278
# d16b5a7decb14b46975f17d4ce4881e6
msgid "Let us go back and see how this works with the program above that draws 15 multicolor squares.  First, we're going to add one line of magic below the import statement --- not strictly necessary, but it will make our lives much simpler, because it prevents stepping into the module containing the turtle code."
msgstr ""

#: ../../source/functions.rst:289
# 45250f2f2af14e2c994b58a8f3d2e301
msgid "Now we're ready to begin.  Put the mouse cursor on the line of the program where we create the turtle screen, and press the *F4* key.  This will run the Python program up to, but not including, the line where we have the cursor.   Our program will \"break\" now, and provide a highlight on the next line to be executed, something like this:"
msgstr ""

#: ../../source/functions.rst:296
# 7431f93851a54c06bec696d64d8dcc0e
msgid "At this point we can press the *F7* key (*step into*) repeatedly to single step through the code.  Observe as we execute lines 10, 11, 12, ... how the turtle window gets created, how its canvas color is changed, how the title gets changed, how the turtle is created on the canvas, and then how the flow of execution gets into the loop, and from there into the function, and into the function's loop, and then repeatedly through the body of that loop."
msgstr ""

#: ../../source/functions.rst:302
# f832a71dfe1143bc8160aab28afe1c32
msgid "While we do this, we can also hover your mouse over some of the variables in the program, and confirm that their values match our conceptual model of what is happening."
msgstr ""

#: ../../source/functions.rst:305
# 62c17110b0da42a9b5a033b4ade50090
msgid "After a few loops, when we're about to execute line 20 and we're starting to get bored, we can use the key *F8* to \"step over\" the function we are calling.  This executes all the statements in the function, but without having to step through each one.   We always have the choice to either \"go for the detail\", or to \"take the high-level view\" and execute the function as a single chunk."
msgstr ""

#: ../../source/functions.rst:310
# bfca297475b44f2aa37f593c3f28da76
msgid "There are some other options, including one that allow us to *resume* execution without further stepping. Find them under the *Run* menu of PyScripter."
msgstr ""

#: ../../source/functions.rst:324
# b506536c0b4a4f9e9a7dbc13f69cccb7
msgid "Functions that return values"
msgstr ""

#: ../../source/functions.rst:326
# 9db7ff8b9e6444378a60540979f7cb48
msgid "Most functions require arguments, values that control how the function does its job. For example, if we want to find the absolute value of a number, we have to indicate what the number is. Python has a built-in function for computing the absolute value:"
msgstr ""

#: ../../source/functions.rst:338
# c46678c6eb6f4b62be424be667b0f49f
msgid "In this example, the arguments to the ``abs`` function are 5 and -5."
msgstr ""

#: ../../source/functions.rst:341
# 2b6fa576ab4d40459cd715eeb52320c9
msgid "Some functions take more than one argument. For example the built-in function ``pow`` takes two arguments, the base and the exponent. Inside the function, the values that are passed get assigned to variables called **parameters**."
msgstr ""

#: ../../source/functions.rst:352
# 6c2f53e783774da69049e6456a3375c5
msgid "Another built-in function that takes more than one argument is ``max``."
msgstr ""

#: ../../source/functions.rst:363
# 5d9ba47ebbcf4ef3bf65d93628ab716d
msgid "``max`` can be sent any number of arguments, separated by commas, and will return the maximum value sent. The arguments can be either simple values or expressions. In the last example, 503 is returned, since it is larger than 33, 125, and 1."
msgstr ""

#: ../../source/functions.rst:368
# 69d6c6ccc77e49e2ba6ef21babcd6b0e
msgid "Furthermore, functions like ``range``, ``int``, ``abs`` all return values that can be used to build more complex expressions."
msgstr ""

#: ../../source/functions.rst:371
# bb756c63401845d59b5cf396e4e0be37
msgid "So an important difference between these functions and one like ``draw_square`` is that ``draw_square`` was not executed because we wanted it to compute a value --- on the contrary, we wrote ``draw_square`` because we wanted it to execute a sequence of steps that caused the turtle to draw."
msgstr ""

#: ../../source/functions.rst:376
# f05abd047efa43959d45ded8a8b57fed
msgid "A function that returns a value is called a **fruitful function** in this book. The opposite of a fruitful function is **void function** --- one that is not executed for its resulting value, but is executed because it does something useful. (Languages like Java, C#, C and C++ use the term \"void function\", other languages like Pascal call it a **procedure**.)"
msgstr ""

#: ../../source/functions.rst:382
# 555aee6e799441099303e01abc34ff17
msgid "How do we write our own fruitful function?  In the exercises at the end of chapter 2 we saw the standard formula for compound interest, which we'll now write as a fruitful function:"
msgstr ""

#: ../../source/functions.rst:404
# d29aa7b4c6664710bbadb983599874f5
msgid "The **return** statement is followed an expression which is evaluated.  Its result is returned to the caller as the \"fruit\" of calling this function."
msgstr ""

#: ../../source/functions.rst:406
# c8aa03638edb43b2949ba328c1c2576a
msgid "We prompted the user for the principal amount.  The type of ``toInvest`` is a string, but we need a number before we can work with it.  Because it is money, and could have decimal places, we've used the ``float`` type converter function to parse the string and return a float."
msgstr ""

#: ../../source/functions.rst:409
# a5a881422ac64eaeaa7e05752a615c8d
msgid "Notice how we entered the arguments for 8% interest, compounded 12 times per year, for 5 years."
msgstr ""

#: ../../source/functions.rst:410
# 8a35d263bf7f47a8a684b59c2912927d
msgid "When we run this, we get the output"
msgstr ""

#: ../../source/functions.rst:412
# d89f7fdfb85441d581264a43169beb3f
msgid "*At the end of the period you'll have R 14898.457083*"
msgstr ""

#: ../../source/functions.rst:414
# 697e69fa13a147abb054d226382d87c5
msgid "This is a bit messy with all these decimal places, but remember that Python doesn't understand that we're working with money: it just does the calculation to the best of its ability, without rounding.  Later we'll see how to format the string that is printed in such a way that it does get nicely rounded to two decimal places before printing."
msgstr ""

#: ../../source/functions.rst:418
# f3fc9d1ab9134173b1392e364d9b3b9d
msgid "The line `toInvest = float(input(\"How much do you want to invest?\"))` also shows yet another example of *composition* --- we can call a function like `float`, and its arguments can be the results of other function calls (like `input`) that we've called along the way."
msgstr ""

#: ../../source/functions.rst:423
# 84c96d6e0b1d48f5ae8a48a2dcb38ec3
msgid "Notice something else very important here. The name of the variable we pass as an argument --- `toInvest` --- has nothing to do with the name of the parameter --- `p`.  It is as if  `p = toInvest` is executed when `final_amt` is called. It doesn't matter what the value was named in the caller, in `final_amt` its name is `p`."
msgstr ""

#: ../../source/functions.rst:429
# 0210633c02df4ebba2715db12998a40b
msgid "These short variable names are getting quite tricky, so perhaps we'd prefer one of these versions instead:"
msgstr ""

#: ../../source/functions.rst:445
# 642b0c2d133d4f4780b09d0d9d7bd7af
msgid "They all do the same thing.   Use your judgement to write code that can be best understood by other humans! Short variable names are more economical and sometimes make code easier to read: E = mc\\ :sup:`2` would not be nearly so memorable if Einstein had used longer variable names!  If you do prefer short names, make sure you also have some comments to enlighten the reader about what the variables are used for."
msgstr ""

#: ../../source/functions.rst:462
# 9f0e4e414c6a4ce89ad787aa566480a2
msgid "Variables and parameters are local"
msgstr ""

#: ../../source/functions.rst:464
# b7f34eb9f5c04de3b7ec4577ea8a3558
msgid "When we create a **local variable** inside a function, it only exists inside the function, and we cannot use it outside. For example, consider again this function:"
msgstr ""

#: ../../source/functions.rst:474
# 15063b63e3d9434991502e4a03bf83ee
msgid "If we try to use `a`, outside the function, we'll get an error:"
msgstr ""

#: ../../source/functions.rst:482
# 0446264d4b784b46b4a08a4132ba9117
msgid "The variable `a` is local to `final_amt`, and is not visible outside the function."
msgstr ""

#: ../../source/functions.rst:485
# 75e8dd4560834f7faa81d825a5b72390
msgid "Additionally, ``a`` only exists while the function is being executed --- we call this its **lifetime**. When the execution of the function terminates, the local variables  are destroyed."
msgstr ""

#: ../../source/functions.rst:490
# e73833b9759e40beb9be953e97c84171
msgid "Parameters are also local, and act like local variables. For example, the lifetimes of `p`, `r`, `n`, `t` begin when `final_amt` is called, and the lifetime ends when the function completes its execution."
msgstr ""

#: ../../source/functions.rst:494
# 1d895ddf46e3457fb09ede4ee58d0576
msgid "So it is not possible for a function to set some local variable to a value, complete its execution, and then when it is called again next time, recover the local variable.  Each call of the function creates new local variables, and their lifetimes expire when the function returns to the caller."
msgstr ""

#: ../../source/functions.rst:503
# 65e15aece76142a496c707cf849185a8
msgid "Turtles Revisited"
msgstr ""

#: ../../source/functions.rst:505
# e72711e71aa8435fa9f92fab3584a925
msgid "Now that we have fruitful functions, we can focus our attention on reorganizing our code so that it fits more nicely into our mental chunks. This process of rearrangement is called **refactoring** the code."
msgstr ""

#: ../../source/functions.rst:509
# b82670a1c1fc42cdb065a7917e78f003
msgid "Two things we're always going to want to do when working with turtles is to create the window for the turtle, and to create one or more turtles. We could write some functions to make these tasks easier in future:"
msgstr ""

#: ../../source/functions.rst:543
# 7f5ee39fa958447e9c3394657071e3a1
msgid "The trick about refactoring code is to anticipate which things we are likely to want to change each time we call the function: these should become the parameters, or changeable bits, of the functions we write."
msgstr ""

#: ../../source/functions.rst:548
# 94b168b75ebb42a8bb59c945b8d9bb1c
msgid "Glossary"
msgstr ""

#: ../../source/functions.rst:553
# 7a33077183cc45af8d0fef39eae14bd7
msgid "A value provided to a function when the function is called. This value is assigned to the corresponding parameter in the function.  The argument can be the result of an expression which may involve operators, operands and calls to other fruitful functions."
msgstr ""

#: ../../source/functions.rst:559
# 1316449467524fb6b1447c0791419cdc
msgid "The second part of a compound statement. The body consists of a sequence of statements all indented the same amount from the beginning of the header.  The standard amount of indentation used within the Python community is 4 spaces."
msgstr ""

#: ../../source/functions.rst:565
# 318c538af89044ba81625c39cb542ce6
msgid "A statement that consists of two parts:"
msgstr ""

#: ../../source/functions.rst:567
# c2b883e4f0434aa7b38cc4f367ae371e
msgid "header - which begins with a keyword determining the statement type, and ends with a colon."
msgstr ""

#: ../../source/functions.rst:569
# 903ccee23ec8403fbf195a9c38b32f1c
msgid "body - containing one or more statements indented the same amount from the header."
msgstr ""

#: ../../source/functions.rst:572
# af246173d4dd46fc8b03acc59394542d
msgid "The syntax of a compound statement looks like this:"
msgstr ""

#: ../../source/functions.rst:581
# 6d68ed6e40834ed2a0a785243e6b3926
msgid "If the first thing in a function body is a string (or, we'll see later, in other situations too) that is attached to the function as its ``__doc__`` attribute, and can be used by tools like PyScripter."
msgstr ""

#: ../../source/functions.rst:586
# fe5ce9e9ba684bd6b9e606bc20072944
msgid "The order in which statements are executed during a program run."
msgstr ""

#: ../../source/functions.rst:589
# 9eb8cfb8ae3844a88f6d55da4b3265bd
msgid "A box in a stack diagram that represents a function call. It contains the local variables and parameters of the function."
msgstr ""

#: ../../source/functions.rst:593
# 241f21793feb4d468f98862db5810c6a
msgid "A named sequence of statements that performs some useful operation. Functions may or may not take parameters and may or may not produce a result."
msgstr ""

#: ../../source/functions.rst:598
# f3c5f95813084556a810781d7241b2b2
msgid "A statement that executes a function. It consists of the name of the function followed by a list of arguments enclosed in parentheses."
msgstr ""

#: ../../source/functions.rst:602
# b06e63a7d52846a99e632633d695738e
msgid "Using the output from one function call as the input to another."
msgstr ""

#: ../../source/functions.rst:605
# 432080765e784a8da78141ad8640eace
msgid "A statement that creates a new function, specifying its name, parameters, and the statements it executes."
msgstr ""

#: ../../source/functions.rst:609
# cac2f4950c1344878d69d9543e2a0df5
msgid "A function that returns a value when it is called."
msgstr ""

#: ../../source/functions.rst:612
# f2bd747e955749f68b54b13d46e668bc
msgid "The first part of a compound statement. A header line begins with a keyword and ends with a colon (:)"
msgstr ""

#: ../../source/functions.rst:616
# 2b40b43b07ee4a93b11ac904cfbeecea
msgid "A statement which permits functions and variables defined in another Python module to be brought into the environment of another script.  To use the features of the turtle, we need to first import the turtle module."
msgstr ""

#: ../../source/functions.rst:621
# bbf507c5880346b48be4cbafdd2af4b3
msgid "Variables and objects have lifetimes --- they are created at some point during program execution, and will be destroyed at some time."
msgstr ""

#: ../../source/functions.rst:625
# 9ba75b5da9c348f3a99f174efe9ddb1d
msgid "A variable defined inside a function. A local variable can only be used inside its function.  Parameters of a function are also a special kind of local variable."
msgstr ""

#: ../../source/functions.rst:630
# f0d48d5fc53345e6b794517997aeaf02
msgid "A name used inside a function to refer to the value which was passed to it as an argument."
msgstr ""

#: ../../source/functions.rst:634
# f30809449bbc496289912ef17e84a3c9
msgid "A fancy word to describe reorganizing our program code, usually to make it more understandable.  Typically, we have a program that is already working, then we go back to \"tidy it up\".  It often involves choosing better variable names, or spotting repeated patterns and moving that code into a function."
msgstr ""

#: ../../source/functions.rst:640
# 9d94f2762fc84aed846044719d6b60a7
msgid "A graphical representation of a stack of functions, their variables, and the values to which they refer."
msgstr ""

#: ../../source/functions.rst:644
# b1d76172fa4e42ee9581ba126125bf52
msgid "A list of the functions that are executing, printed when a runtime error occurs. A traceback is also commonly refered to as a *stack trace*, since it lists the functions in the order in which they are stored in the `runtime stack <http://en.wikipedia.org/wiki/Runtime_stack>`__."
msgstr ""

#: ../../source/functions.rst:651
# d90e7e20f25d47a2b07d85bdf3659120
msgid "The opposite of a fruitful function: one that does not return a value.  It is executed for the work it does, rather than for the value it returns."
msgstr ""

#: ../../source/functions.rst:657
# 27914d6a453f4180967bf05af2da645f
msgid "Exercises"
msgstr ""

#: ../../source/functions.rst:659
# 3b1144a89ef943e3ba07973076101829
msgid "Write a void (non-fruitful) function to draw a square.  Use it in a program to draw the image shown below. Assume each side is 20 units. (Hint: notice that the turtle has already moved away from the ending point of the last square when the program ends.)"
msgstr ""

#: ../../source/functions.rst:666
# 9cee93ecde8d4a56abae78ff813e9dbb
msgid "Write a program to draw this. Assume the innermost square is 20 units per side, and each successive square is 20 units bigger, per side, than the one inside it."
msgstr ""

#: ../../source/functions.rst:671
# 7642a0c4cb034c39af629b4733afe097
msgid "Write a void function `draw_poly(t, n, sz)` which makes a turtle draw a regular polygon. When called with `draw_poly(tess, 8, 50)`, it will draw a shape like this:"
msgstr ""

#: ../../source/functions.rst:677
# d841d6a0662d4b2f9b556faa1ab77653
msgid "Draw this pretty pattern."
msgstr ""

#: ../../source/functions.rst:681
# f41b3c1b11d142079490e99f51e1cb6d
msgid "The two spirals in this picture differ only by the turn angle.  Draw both."
msgstr ""

#: ../../source/functions.rst:686
# 74fe2dd42ee44c67984ea2d7d03be598
msgid "Write a void function `draw_equitriangle(t, sz)` which calls `draw_poly` from the previous question to have its turtle draw a equilateral triangle."
msgstr ""

#: ../../source/functions.rst:689
# 362f5cd9a5d44f63a6f44b03a3813a60
msgid "Write a fruitful function `sum_to(n)` that returns the sum of all integer numbers up to and including `n`.   So `sum_to(10)` would be `1+2+3...+10` which would return the value 55."
msgstr ""

#: ../../source/functions.rst:692
# 20fe58c1413840a4b3d76bf72b90040d
msgid "Write a function `area_of_circle(r)` which returns the area of a circle of radius `r`."
msgstr ""

#: ../../source/functions.rst:694
# 0a6f2f7497a446e48460abf332ecd6f4
msgid "Write a void function to draw a star, where the length of each side is 100 units. (Hint: You should turn the turtle by 144 degrees at each point.)"
msgstr ""

#: ../../source/functions.rst:699
# 5726b5fe53074d25a842ff4faddbc9f8
msgid "Extend your program above.  Draw five stars, but between each, pick up the pen, move forward by 350 units, turn right by 144, put the pen down, and draw the next star. You'll get something like this:"
msgstr ""

#: ../../source/functions.rst:705
# cb28fc09bdb1417fbedf6abe948b4c3c
msgid "What would it look like if you didn't pick up the pen?"
msgstr ""

