# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/lists.rst:12
# d83e13c685534f89b7fa0d3c2f97fa4a
msgid "Lists"
msgstr ""

#: ../../source/lists.rst:14
# b793506ee94f493ba23ae641057cad40
msgid "A **list** is an ordered collection of values. The values that make up a list are called its **elements**, or its **items**. We will use the term `element` or `item` to mean the same thing. Lists are similar to strings, which are ordered collections of characters, except that the elements of a list can be any type.  Lists and strings --- and other collections that maintain the order of their items --- are called **sequences**."
msgstr ""

#: ../../source/lists.rst:24
# 3e9f65b7e5ce40f1888b183bfc6d472f
msgid "List values"
msgstr ""

#: ../../source/lists.rst:26
# 1505fd1e03f844ec878f84821319f259
msgid "There are several ways to create a new list; the simplest is to enclose the elements in square brackets ( ``[`` and ``]``):"
msgstr ""

#: ../../source/lists.rst:35
# 7e069581a294461a96b77cad37df91d3
msgid "The first example is a list of four integers. The second is a list of three strings. The elements of a list don't have to be the same type.  The following list contains a string, a float, an integer, and (amazingly) another list:"
msgstr ""

#: ../../source/lists.rst:45
# 9614721be9194336b249d216eca033f1
msgid "A list within another list is said to be **nested**."
msgstr ""

#: ../../source/lists.rst:47
# 2a398ec53d7b4b27836dab2e308cb5d4
msgid "Finally, a list with no elements is called an empty list, and is denoted ``[]``."
msgstr ""

#: ../../source/lists.rst:50
# 950ea5a3804c452783914c5fda542c2d
msgid "We have already seen that we can assign list values to variables or pass lists as parameters to functions:"
msgstr ""

#: ../../source/lists.rst:66
# 68af2cd6eab4495abcb69959c0189d04
msgid "Accessing elements"
msgstr ""

#: ../../source/lists.rst:68
# 9723673ff76a4e50b96a65c9d4710416
msgid "The syntax for accessing the elements of a list is the same as the syntax for accessing the characters of a string---the index operator ( ``[]`` -- not to be confused with an empty list). The expression inside the brackets specifies the index. Remember that the indices start at 0:"
msgstr ""

#: ../../source/lists.rst:78
# eae9ee13fb604ad5b0d79683962479a0
msgid "Any integer expression can be used as an index:"
msgstr ""

#: ../../source/lists.rst:89
# db2028d0d3034a0bb7da8b1b6d1d4184
msgid "If you try to access or assign to an element that does not exist, you get a runtime error:"
msgstr ""

#: ../../source/lists.rst:99
# 408eef57a2ea435bbfd5028d06e22fd8
msgid "It is common to use a loop variable as a list index."
msgstr ""

#: ../../source/lists.rst:109
# a17b3e7c82654809b48004f6eb04cd48
msgid "Each time through the loop, the variable ``i`` is used as an index into the list, printing the ``i``'th element. This pattern of computation is called a **list traversal**."
msgstr ""

#: ../../source/lists.rst:113
# e1456b2e3b8a497382dff9e970ae1718
msgid "The above sample doesn't need or use the index ``i`` for anything besides getting the items from the list, so this more direct version --- where the `for` loop gets the items --- might be preferred:"
msgstr ""

#: ../../source/lists.rst:128
# e298d54e36734ffe9ed5fc27fd62ba7b
msgid "List length"
msgstr ""

#: ../../source/lists.rst:130
# 1f48bdbfd2e5411fa963897c59b5ef82
msgid "The function ``len`` returns the length of a list, which is equal to the number of its elements. If you are going to use an integer index to access the list, it is a good idea to use this value as the upper bound of a loop instead of a constant. That way, if the size of the list changes, you won't have to go through the program changing all the loops; they will work correctly for any size list:"
msgstr ""

#: ../../source/lists.rst:146
# de00565b41924df187818d2d2eeb5d92
msgid "The last time the body of the loop is executed, ``i`` is ``len(horsemen) - 1``, which is the index of the last element. (But the version without the index looks even better now!)"
msgstr ""

#: ../../source/lists.rst:150
# a8e0f22133b745e69dcebf0c369c06cb
msgid "Although a list can contain another list, the nested list still counts as a single element in its parent list. The length of this list is 4:"
msgstr ""

#: ../../source/lists.rst:160
# a849c0ebf4264fde9089b44cf08cda1b
msgid "List membership"
msgstr ""

#: ../../source/lists.rst:162
# 80434d5641ad4121bda22d6b4a1a42d1
msgid "``in`` and ``not in`` are boolean operators that test membership in a sequence. We used them previously with strings, but they also work with lists and other sequences:"
msgstr ""

#: ../../source/lists.rst:176
# 555bc7e667204a65abdfd5a98920c3e5
msgid "Using this produces a more elegant version of the nested loop program we previously used to count the number of students doing Computer Science in the section :ref:`nested_data`:"
msgstr ""

#: ../../source/lists.rst:200
# eaad70d5f8694ba59028aabe8a5deaf0
msgid "List operations"
msgstr ""

#: ../../source/lists.rst:202
# e874ae8ac4b74024a724ef0b336507df
msgid "The ``+`` operator concatenates lists:"
msgstr ""

#: ../../source/lists.rst:212
# b9d27e569472484299801c3ee4f3941e
msgid "Similarly, the ``*`` operator repeats a list a given number of times:"
msgstr ""

#: ../../source/lists.rst:221
# a80fb054a3fc4a61bac297768fd72072
msgid "The first example repeats ``[0]`` four times. The second example repeats the list ``[1, 2, 3]`` three times."
msgstr ""

#: ../../source/lists.rst:228
# 8b52353af61f4ff29e9f2e2cc1a01dd3
msgid "List slices"
msgstr ""

#: ../../source/lists.rst:230
# 6b9267b6f626463b9ba4993bdc92c6bd
msgid "The slice operations we saw previously with strings lets us work with sublists:"
msgstr ""

#: ../../source/lists.rst:247
# 71a31ce4c5174aeba366915e5c4f6e8b
msgid "Lists are mutable"
msgstr ""

#: ../../source/lists.rst:249
# 9c73222f9d77412684fe5910214c84ca
msgid "Unlike strings, lists are **mutable**, which means we can change their elements. Using the bracket operator on the left side of an assignment, we can update one of the elements:"
msgstr ""

#: ../../source/lists.rst:261
# e4e7431b179a41afa80bd0f54b006d08
msgid "The bracket operator applied to a list can appear anywhere in an expression. When it appears on the left side of an assignment, it changes one of the elements in the list, so the first element of ``fruit`` has been changed from ``'banana'`` to ``'pear'``, and the last from ``'quince'`` to ``'orange'``. An assignment to an element of a list is called **item assignment**. Item assignment does not work for strings:"
msgstr ""

#: ../../source/lists.rst:276
# 7a3b4c94621346bab7809cd3e17dc91b
msgid "but it does for lists:"
msgstr ""

#: ../../source/lists.rst:286
# 680d9b84dfd14d60b9d3e692ab725538
msgid "With the slice operator we can update a whole sublist at once:"
msgstr ""

#: ../../source/lists.rst:295
# e34fd588ee0f4069a84a514529b8cba4
msgid "We can also remove elements from a list by assigning the empty list to them:"
msgstr ""

#: ../../source/lists.rst:304
# c2d785fd905441cda25c964406714051
msgid "And we can add elements to a list by squeezing them into an empty slice at the desired location:"
msgstr ""

#: ../../source/lists.rst:320
# 5a7b45859ed149b58c1643030f2b23e3
msgid "List deletion"
msgstr ""

#: ../../source/lists.rst:322
# b5feaa1d6f0d4869a082b1ab354ea2a9
msgid "Using slices to delete list elements can be error-prone. Python provides an alternative that is more readable. The ``del`` statement removes an element from a list:"
msgstr ""

#: ../../source/lists.rst:333
# b7f8de9cdf824303b9289350ba75bade
msgid "As you might expect, ``del`` causes a runtime error if the index is out of range."
msgstr ""

#: ../../source/lists.rst:336
# ef77e6b96f5f4aa4a566fb8ea7765b9c
msgid "You can also use ``del`` with a slice to delete a sublist:"
msgstr ""

#: ../../source/lists.rst:345
# 62d97b1eba3c4965845bf3ebdd6b08b8
msgid "As usual, the sublist selected by slice contains all the elements up to, but not including, the second index."
msgstr ""

#: ../../source/lists.rst:351
# b97923d74058474ca923c87bdd9854ab
msgid "Objects and references"
msgstr ""

#: ../../source/lists.rst:353
# 61e1ffa7ed2948b4a05489f48fa14c1c
msgid "If we execute these assignment statements,"
msgstr ""

#: ../../source/lists.rst:361
# 9805dddadea943bebdc0fa92766e19b1
msgid "we know that ``a`` and ``b`` will refer to a string object with the letters ``\"banana\"``. But we don't know yet whether they point to the *same* string object."
msgstr ""

#: ../../source/lists.rst:364
# 2618549f211a427c961c0c09249d6901
msgid "There are two possible ways the Python interpreter could arrange its memory:"
msgstr ""

#: ../../source/lists.rst:369
# e0ce257d60404892a39c605212c6131f
msgid "In one case, ``a`` and ``b`` refer to two different objects that have the same value. In the second case, they refer to the same object."
msgstr ""

#: ../../source/lists.rst:372
# a2cd6635fd3f422a8244ff72be794cb6
msgid "We can test whether two names refer to the same object using the *is* operator:"
msgstr ""

#: ../../source/lists.rst:380
# a3424e751e114325b334400d1972c1a8
msgid "This tells us that both ``a`` and ``b`` refer to the same object, and that it is the second of the two state snapshots that accurately describes the relationship."
msgstr ""

#: ../../source/lists.rst:383
# 716c864acccb47c3b98e92ea2c8fefc4
msgid "Since strings are *immutable*, Python optimizes resources by making two names that refer to the same string value refer to the same object."
msgstr ""

#: ../../source/lists.rst:386
# 951444a5be9b4eca98790e999052ae4f
msgid "This is not the case with lists:"
msgstr ""

#: ../../source/lists.rst:397
# fe67b8ea48694f53a64a15e17c8d0548
msgid "The state snapshot here looks like this:"
msgstr ""

#: ../../source/lists.rst:402
# f764134a4ad9489cbae3cee8d6a2da9a
msgid "``a`` and ``b`` have the same value but do not refer to the same object."
msgstr ""

#: ../../source/lists.rst:407
# 7d573a2c8fcc4cf5b1d33c897de030b8
msgid "Aliasing"
msgstr ""

#: ../../source/lists.rst:409
# e8a7ab67727b42fc8ecae308ea93841b
msgid "Since variables refer to objects, if we assign one variable to another, both variables refer to the same object:"
msgstr ""

#: ../../source/lists.rst:419
# 89c736a9f53d437586898b90a4144c1f
msgid "In this case, the state snapshot looks like this:"
msgstr ""

#: ../../source/lists.rst:424
# b9c4483bc6d14b53a25350e5af23fdbb
msgid "Because the same list has two different names, ``a`` and ``b``, we say that it is **aliased**. Changes made with one alias affect the other:"
msgstr ""

#: ../../source/lists.rst:433
# 6a488bc2297e412ab7866780efda56fa
msgid "Although this behavior can be useful, it is sometimes unexpected or undesirable. In general, it is safer to avoid aliasing when you are working with mutable objects(i.e. lists at this point in our textbook, but we'll meet more mutable objects as we cover classes and objects, dictionaries and sets). Of course, for immutable objects (i.e. strings, tuples), there's no problem - it is just not possible to change something and get a surprise when you access an alias name. That's why Python is free to alias strings (and any other immutable kinds of data) when it sees an opportunity to economize."
msgstr ""

#: ../../source/lists.rst:446
# f1085f21f35e429cb79f47a75402d381
msgid "Cloning lists"
msgstr ""

#: ../../source/lists.rst:448
# d36a4da95ca44446a0fa45f9a2248c5e
msgid "If we want to modify a list and also keep a copy of the original, we need to be able to make a copy of the list itself, not just the reference. This process is sometimes called **cloning**, to avoid the ambiguity of the word copy."
msgstr ""

#: ../../source/lists.rst:452
# 972c4b98129a47739a629cfc5bb5b7db
msgid "The easiest way to clone a list is to use the slice operator:"
msgstr ""

#: ../../source/lists.rst:461
# 1fa08c0358a74bb489a563bb51783d15
msgid "Taking any slice of ``a`` creates a new list. In this case the slice happens to consist of the whole list.  So now the relationship is like this:"
msgstr ""

#: ../../source/lists.rst:467
# 6acd693f4d284593bdf23dbb84519659
msgid "Now we are free to make changes to ``b`` without worrying that we'll inadvertently be changing ``a``:"
msgstr ""

#: ../../source/lists.rst:481
# e343c11fed544599be35ab99f96b712b
msgid "Lists and ``for`` loops"
msgstr ""

#: ../../source/lists.rst:483
# f3d8fdc811db4574b4f2e44d13cba0af
msgid "The ``for`` loop also works with lists, as we've already seen. The generalized syntax of a ``for`` loop is:"
msgstr ""

#: ../../source/lists.rst:491
# 0fd7d057017540258fb202b742902e0b
msgid "So, as we've seen"
msgstr ""

#: ../../source/lists.rst:500
# 2d61534a08964624bf56ecea1a8b6063
msgid "It almost reads like English: For (every) friend in (the list of) friends, print (the name of the) friend."
msgstr ""

#: ../../source/lists.rst:503
# 4fc9a6dc5b604b38a082be9cb8e306f7
msgid "Any list expression can be used in a ``for`` loop:"
msgstr ""

#: ../../source/lists.rst:516
# f155e21132c74a66ac63c0ee82038816
msgid "The first example prints all the multiples of 3 between 0 and 19. The second example expresses enthusiasm for various fruits."
msgstr ""

#: ../../source/lists.rst:519
# 17c634387d1847619b44c2e4562b9f57
msgid "Since lists are mutable, we often want to traverse a list, changing each of its elements. The following squares all the numbers in the list `xs`:"
msgstr ""

#: ../../source/lists.rst:530
# 8717140b6e42466c992bc15d9f915935
msgid "Take a moment to think about ``range(len(xs))`` until you understand how it works."
msgstr ""

#: ../../source/lists.rst:533
# 20999bedb3c34ed5a73c3c1606cd7fdf
msgid "In this example we are interested in both the *value* of an item, (we want to square that value), and its *index* (so that we can assign the new value to that position). This pattern is common enough that Python provides a nicer way to implement it:"
msgstr ""

#: ../../source/lists.rst:545
# b02ab1fe3dd0427dbf4b0e5d90c08248
msgid "``enumerate`` generates pairs of both (index, value) during the list traversal. Try this next example to see more clearly how ``enumerate`` works:"
msgstr ""

#: ../../source/lists.rst:566
# 641a161254774789b9bfe73f5c103563
msgid "List parameters"
msgstr ""

#: ../../source/lists.rst:568
# 7ac1440fffa4405b82810eb3aef16046
msgid "Passing a list as an argument actually passes a reference to the list, not a copy or clone of the list. So parameter passing creates an alias for you: the caller has one variable referencing the list, and the called function has an alias, but there is only one underlying list object. For example, the function below takes a list as an argument and multiplies each element in the list by 2:"
msgstr ""

#: ../../source/lists.rst:583
# f49a9088efe9469bbb89e8a8363d9fc5
msgid "If we add the following onto our script:"
msgstr ""

#: ../../source/lists.rst:592
# e643501a7f54465b8c1e1a116f8de25a
msgid "When we run it we'll get:"
msgstr ""

#: ../../source/lists.rst:599
# c16be48ac2ac480c80cc2caa2c9c12fc
msgid "In the function above, the parameter ``a_list`` and the variable ``things`` are aliases for the same object.  So before any changes to the elements in the list, the state snapshot looks like this:"
msgstr ""

#: ../../source/lists.rst:607
# 7737d35a2d634d31ab6126fdc5fa3e29
msgid "Since the list object is shared by two frames, we drew it between them."
msgstr ""

#: ../../source/lists.rst:609
# 771003c1f9c841c6a1f6e737b36daa7a
msgid "If a function modifies the items of a list parameter, the caller sees the change."
msgstr ""

#: ../../source/lists.rst:613
# 41b70551a14d465e96c61e4eaa8c9c5f
msgid "We've already mentioned the Python visualizer at http://netserv.ict.ru.ac.za/python3_viz. It is a very useful tool for building a good understanding of references, aliases, assignments, and passing arguments to functions.  Pay special attention to cases where you clone a list or have two separate lists, and cases where there is only one underlying list, but more than one variable is aliased to reference the list."
msgstr ""

#: ../../source/lists.rst:622
# 2171a2cc2fc94bf3a2afdd77df27dd90
msgid "List methods"
msgstr ""

#: ../../source/lists.rst:624
# ef0c434aadf84574b3eb3d252e0d9ad4
msgid "The dot operator can also be used to access built-in methods of list objects.  We'll start with the most useful method for adding something onto the end of an existing list..."
msgstr ""

#: ../../source/lists.rst:638
# e08da000f2a94d5293769859d28ea4c2
msgid "``append`` is a list method which adds the argument passed to it to the end of the list. We'll use it heavily when we're creating new lists. Continuing with this example, we show several other list methods:"
msgstr ""

#: ../../source/lists.rst:665
# a13684387a9745ec9b6406640cabe23c
msgid "Experiment and play with the list methods shown here, and read their documentation until you feel confident that you understand how they work."
msgstr ""

#: ../../source/lists.rst:673
# 34e70469b8b645e48ad7bfa321811887
msgid "Pure functions and modifiers"
msgstr ""

#: ../../source/lists.rst:675
# 681102b60dff467e895ee24f5251fa03
msgid "Functions which take lists as arguments and change them during execution are called **modifiers** and the changes they make are called **side effects**."
msgstr ""

#: ../../source/lists.rst:678
# 0fe949800b944bbf9e3e56060aa22f98
msgid "A **pure function** does not produce side effects. It communicates with the calling program only through parameters, which it does not modify, and a return value. Here is ``double_stuff`` written as a pure function:"
msgstr ""

#: ../../source/lists.rst:696
# 7705eac6383e49ee88926f0f76fa60bd
msgid "This version of ``double_stuff`` does not change its arguments:"
msgstr ""

#: ../../source/lists.rst:707
# bd02da55e69e47d08be45c655d51972d
msgid "An early rule we saw for assignment said \"first evaluate the right hand side, then assign the resulting value to the variable\".  So it is quite safe to assign the function result to the same variable that was passed to the function:"
msgstr ""

#: ../../source/lists.rst:720
# 2b8c333fe7e0453d849d94cacf1665d3
msgid "Anything that can be done with modifiers can also be done with pure functions. In fact, some programming languages only allow pure functions. There is some evidence that programs that use pure functions are faster to develop and less error-prone than programs that use modifiers. Nevertheless, modifiers are convenient at times, and in some cases, functional programs are less efficient."
msgstr ""

#: ../../source/lists.rst:726
# b41016766a544a468e43d35f52d30c01
msgid "In general, we recommend that you write pure functions whenever it is reasonable to do so and resort to modifiers only if there is a compelling advantage. This approach might be called a *functional programming style*."
msgstr ""

#: ../../source/lists.rst:731
# 96ea95d326be4cd5bd7e40cdf3febb9d
msgid "Functions that produce lists"
msgstr ""

#: ../../source/lists.rst:733
# b3300baefe4e46bd96e5d6ed7856b59c
msgid "The pure version of ``double_stuff`` above made use of an important **pattern** for your toolbox. Whenever you need to write a function that creates and returns a list, the pattern is usually:"
msgstr ""

#: ../../source/lists.rst:747
# db72878251a64bfeb6214a73adeabd0b
msgid "Let us show another use of this pattern.  Assume you already have a function ``is_prime(x)`` that can test if x is prime.  Write a function to return a list of all prime numbers less than n:"
msgstr ""

#: ../../source/lists.rst:765
# c07468b2c9be4e10a7d8a397dc7d426a
msgid "Strings and lists"
msgstr ""

#: ../../source/lists.rst:767
# 0bfbb93fa8684ebfa847979e91d7a84d
msgid "Two of the most useful methods on strings involve conversion to and from lists of substrings. The ``split`` method (which we've already seen) breaks a string into a list of words.  By default, any number of whitespace characters is considered a word boundary:"
msgstr ""

#: ../../source/lists.rst:780
# 6ab9532b2a1e47d6a79bd456e8bc3213
msgid "An optional argument called a **delimiter** can be used to specify which string to use as the boundary marker between substrings. The following example uses the string ``ai`` as the delimiter:"
msgstr ""

#: ../../source/lists.rst:789
# 284b99b0c1394dc08605b1316bd6067d
msgid "Notice that the delimiter doesn't appear in the result."
msgstr ""

#: ../../source/lists.rst:791
# a1622a44a14c4fdab437ddf23c3616cd
msgid "The inverse of the ``split`` method is ``join``.  You choose a desired **separator** string, (often called the *glue*) and join the list with the glue between each of the elements:"
msgstr ""

#: ../../source/lists.rst:802
# 8b4d231ede804d25a4495526f3a805a6
msgid "The list that you glue together (``wds`` in this example) is not modified.  Also, as these next examples show, you can use empty glue or multi-character strings as glue:"
msgstr ""

#: ../../source/lists.rst:815
# c73d8b99eb6b4591beb97b64fcc3be70
msgid "``list`` and ``range``"
msgstr ""

#: ../../source/lists.rst:817
# 901b2a21ddbb49da9586d7285d64b51b
msgid "Python has a built-in type conversion function called ``list`` that tries to turn whatever you give it into a list."
msgstr ""

#: ../../source/lists.rst:829
# 921596313a394affaffe129fa52b5dfa
msgid "One particular feature of ``range`` is that it doesn't instantly compute all its values: it \"puts off\" the computation, and does it on demand, or \"lazily\".  We'll say that it gives a **promise** to produce the values when they are needed.   This is very convenient if your computation short-circuits a search and returns early, as in this case:"
msgstr ""

#: ../../source/lists.rst:850
# 3774456b05cb443cbb2653193e32e6c5
msgid "In the second test, if range were to eagerly go about building a list with all those elements, you would soon exhaust your computer's available memory and crash the program.  But it is cleverer than that!  This computation works just fine, because the ``range`` object is just a promise to produce the elements if and when they are needed.  Once the condition in the `if` becomes true, no further elements are generated, and the function returns.  (Note: Before Python 3, ``range`` was not lazy. If you use an earlier versions of Python, YMMV!)"
msgstr ""

#: ../../source/lists.rst:860
# a967750c40094dc69b873f69c90b0811
msgid "The acronym YMMV stands for *your mileage may vary*.  American car advertisements often quoted fuel consumption figures for cars, e.g. that they would get 28 miles per gallon.  But this always had to be accompanied by legal small-print warning the reader that they might not get the same.  The term YMMV is now used idiomatically to mean \"your results may differ\", e.g. *The battery life on this phone is 3 days, but YMMV.*"
msgstr ""

#: ../../source/lists.rst:867
# cc60b0d08754460396bacfb5a3c11a3d
msgid "You'll sometimes find the lazy ``range`` wrapped in a call to ``list``.  This forces Python to turn the lazy promise into an actual list:"
msgstr ""

#: ../../source/lists.rst:880
# 6d31a3422a26486aaad3aff52d6935d0
msgid "Nested lists"
msgstr ""

#: ../../source/lists.rst:882
# 19441b7a17d34ecd9eb9745af9cc0dbd
msgid "A nested list is a list that appears as an element in another list. In this list, the element with index 3 is a nested list:"
msgstr ""

#: ../../source/lists.rst:889
# 9603ae7cff9c4c36a457fb0a199160fc
msgid "If we print(``nested[3]``), we get ``[10, 20]``. To extract an element from the nested list, we can proceed in two steps:"
msgstr ""

#: ../../source/lists.rst:898
# b4529e8cd35f4452b661df317ea243c4
msgid "Or we can combine them:"
msgstr ""

#: ../../source/lists.rst:905
# 2c77169a8ab64529ab2c959b16d30c2c
msgid "Bracket operators evaluate from left to right, so this expression gets the three-'th element of ``nested`` and extracts the one-'th element from it."
msgstr ""

#: ../../source/lists.rst:911
# 56209a5b8d88448da685f9b138e81f92
msgid "Matrices"
msgstr ""

#: ../../source/lists.rst:913
# 9a332675b49c4e3d8fb86dfde9cf28db
msgid "Nested lists are often used to represent matrices. For example, the matrix:"
msgstr ""

#: ../../source/lists.rst:917
# 2f24a4a1ae1c4ad3b41c10727ed01c67
msgid "might be represented as:"
msgstr ""

#: ../../source/lists.rst:923
# c57cbaafac7a41eabdce2c2d16d2e8b3
msgid "``mx`` is a list with three elements, where each element is a row of the matrix. We can select an entire row from the matrix in the usual way:"
msgstr ""

#: ../../source/lists.rst:931
# 9c5051e07d684f1084c53beb51e70a13
msgid "Or we can extract a single element from the matrix using the double-index form:"
msgstr ""

#: ../../source/lists.rst:938
# 4ba570dedffc4ce6bc3b214376af62f5
msgid "The first index selects the row, and the second index selects the column. Although this way of representing matrices is common, it is not the only possibility. A small variation is to use a list of columns instead of a list of rows. Later we will see a more radical alternative using a dictionary."
msgstr ""

#: ../../source/lists.rst:944
# 324413badde34378ae89400a9e0576b2
msgid "Glossary"
msgstr ""

#: ../../source/lists.rst:950
# 56150be848c0403fa933b85427f7f1c5
msgid "Multiple variables that contain references to the same object."
msgstr ""

#: ../../source/lists.rst:953
# e2179e0994f3479a9b66d988e63baf2f
msgid "To create a new object that has the same value as an existing object. Copying a reference to an object creates an alias but doesn't clone the object."
msgstr ""

#: ../../source/lists.rst:958
# 08407c710c0744e2b6c8e02dff3e04dc
msgid "A character or string used to indicate where a string should be split."
msgstr ""

#: ../../source/lists.rst:961
# 0a288b56e1944f3fa6c80ad0adf1e1f8
msgid "One of the values in a list (or other sequence). The bracket operator selects elements of a list.  Also called *item*."
msgstr ""

#: ../../source/lists.rst:965
# a5dcac1f719742b6865f55dedb36478d
msgid "An integer value that indicates the position of an item in a list. Indexes start from 0."
msgstr ""

#: ../../source/lists.rst:969
# a575492e47f546d5babff4bd0d81aefb
msgid "See *element*."
msgstr ""

#: ../../source/lists.rst:972
# d9f83f02153c4ec783053d9c248b5d30
msgid "A collection of values, each in a fixed position within the list. Like other types ``str``, ``int``, ``float``, etc. there is also a ``list`` type-converter function that tries to turn whatever argument you give it into a list."
msgstr ""

#: ../../source/lists.rst:978
# 85f151a2109249afab1339fd33d4fa00
msgid "The sequential accessing of each element in a list."
msgstr ""

#: ../../source/lists.rst:981
# 5d0566136e33428aa004a094d4cc6d8c
msgid "A function which changes its arguments inside the function body. Only mutable types can be changed by modifiers."
msgstr ""

#: ../../source/lists.rst:985
# f73024c64d2a42ed9d60a3826b821180
msgid "A data type in which the elements can be modified. All mutable types are compound types. Lists are mutable data types; strings are not."
msgstr ""

#: ../../source/lists.rst:989
# 93e7da43ce5846fbac05af09e49d8e9e
msgid "A list that is an element of another list."
msgstr ""

#: ../../source/lists.rst:992
# 442f5efa143f4e2abd5e3ed269eca163
msgid "A thing to which a variable can refer."
msgstr ""

#: ../../source/lists.rst:995
# a4bc0d10dd984174b38231bd95f57559
msgid "A sequence of statements, or a style of coding something that has general applicability in a number of different situations.  Part of becoming a mature Computer Scientist is to learn and establish the patterns and algorithms that form your toolkit.  Patterns often correspond to your \"mental chunking\"."
msgstr ""

#: ../../source/lists.rst:1002
# 62b520dc051847e7a9fd9948bdafb806
msgid "An object that promises to do some work or deliver some values if they're eventually needed, but it lazily puts off doing the work immediately. Calling ``range`` produces a promise."
msgstr ""

#: ../../source/lists.rst:1007
# 1642ef0d39e74c8b9024a554981a56dd
msgid "A function which has no side effects. Pure functions only make changes to the calling program through their return values."
msgstr ""

#: ../../source/lists.rst:1011
# 307e3ea438ec4b81b7ffed6d7ab99b85
msgid "Any of the data types that consist of an ordered collection of elements, with each element identified by an index."
msgstr ""

#: ../../source/lists.rst:1015
# d618f2c4c6e64e6c839c9ec5da0e609f
msgid "A change in the state of a program made by calling a function. Side effects can only be produced by modifiers."
msgstr ""

#: ../../source/lists.rst:1019
# 106268b3555145b2a15d0fe596ab69a9
msgid "The interval between successive elements of a linear sequence. The third (and optional argument) to the ``range`` function is called the step size.  If not specified, it defaults to 1."
msgstr ""

#: ../../source/lists.rst:1025
# 0806d37702264186add8cd1655947ec0
msgid "Exercises"
msgstr ""

#: ../../source/lists.rst:1028
# 907861578dcc484599ad626493e499fb
msgid "What is the Python interpreter's response to the following?"
msgstr ""

#: ../../source/lists.rst:1034
# bcac1dbe0fd541f1a350733ed6216617
msgid "The three arguments to the *range* function are *start*, *stop*, and *step*, respectively. In this example, ``start`` is greater than ``stop``.  What happens if ``start < stop`` and ``step < 0``? Write a rule for the relationships among ``start``, ``stop``, and ``step``."
msgstr ""

#: ../../source/lists.rst:1039
# b3c47be2c94f4c48a235718100b01260
msgid "Consider this fragment of code:"
msgstr ""

#: ../../source/lists.rst:1051
# 82687eebd95c44a0b0dd23957a393204
msgid "Does this fragment create one or two turtle instances?  Does setting the colour of ``alex`` also change the colour of ``tess``?  Explain in detail."
msgstr ""

#: ../../source/lists.rst:1054
# f12ea07674884012a5bd39fa080f3a84
msgid "Draw a state snapshot for ``a`` and ``b`` before and after the third line of the following python code is executed:"
msgstr ""

#: ../../source/lists.rst:1064
# 536ea55a09e241e8a8d6f1d491cf0207
msgid "What will be the output of the following program?"
msgstr ""

#: ../../source/lists.rst:1075
# fba2d02c02a941289b9b4c0b1e607b96
msgid "Provide a *detailed* explanation of the results."
msgstr ""

#: ../../source/lists.rst:1077
# cb4187f84b4643d9aeb2898878f7aa7b
msgid "Lists can be used to represent mathematical *vectors*.  In this exercise and several that follow you will write functions to perform standard operations on vectors.  Create a script named ``vectors.py`` and write Python code to pass the tests in each case."
msgstr ""

#: ../../source/lists.rst:1082
# d021168c217a4ee5a8c5a846355955d4
msgid "Write a function ``add_vectors(u, v)`` that takes two lists of numbers of the same length, and returns a new list containing the sums of the corresponding elements of each:"
msgstr ""

#: ../../source/lists.rst:1093
# 8dc266a2b4074c44ba8b0a2119d749e5
msgid "Write a function ``scalar_mult(s, v)`` that takes a number, ``s``, and a list, ``v`` and returns the `scalar multiple <http://en.wikipedia.org/wiki/Scalar_multiple>`__ of ``v`` by ``s``. :"
msgstr ""

#: ../../source/lists.rst:1104
# 14c59471a5c349468d1931c0dc3cd77c
msgid "Write a function ``dot_product(u, v)`` that takes two lists of numbers of the same length, and returns the sum of the products of the corresponding elements of each (the `dot_product <http://en.wikipedia.org/wiki/Dot_product>`__)."
msgstr ""

#: ../../source/lists.rst:1116
# 47554753190c4a8996f9f3d0ead01bff
msgid "*Extra challenge for the mathematically inclined*: Write a function ``cross_product(u, v)`` that takes two lists of numbers of length 3 and returns their `cross product <http://en.wikipedia.org/wiki/Cross_product>`__.  You should write your own tests."
msgstr ""

#: ../../source/lists.rst:1122
# 9e8cb7ee1dca4b9e94f5c2c1bef837c0
msgid "Describe the relationship between ``' '.join(song.split())`` and ``song`` in the fragment of code below. Are they the same for all strings assigned to ``song``? When would they be different? :"
msgstr ""

#: ../../source/lists.rst:1132
# 32f5ed8336ed4507ad5177e3d3e473cb
msgid "Write a function ``replace(s, old, new)`` that replaces all occurrences of ``old`` with ``new`` in a string ``s``:"
msgstr ""

#: ../../source/lists.rst:1147
# 023fe72c971e43fb98fc1ff5a00110cc
msgid "*Hint*: use the ``split`` and ``join`` methods."
msgstr ""

#: ../../source/lists.rst:1149
# c44ea49f9e734a0fa37eb8ff81a5af48
msgid "Suppose you want to swap around the values in two variables.  You decide to factor this out into a reusable function, and write this code:"
msgstr ""

#: ../../source/lists.rst:1166
# 153d7c03f5964da3b8fed9a4af57ab80
msgid "Run this program and describe the results.  Oops!  So it didn't do what you intended! Explain why not. Using a Python visualizer like the one at http://netserv.ict.ru.ac.za/python3_viz may help you build a good conceptual model of what is going on. What will be the values of ``a`` and ``b`` after the call to ``swap``?"
msgstr ""

