# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012, Peter Wentworth, Jeffrey Elkner, Allen B. Downey and Chris Meyers
# This file is distributed under the same license as the How to Think Like a Computer Scientist: Learning with Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: How to Think Like a Computer Scientist: Learning with Python 3rd Edition\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-07 17:54\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/collections.rst:12
# f6b815beb69149819bdd36c6d712a195
msgid "Collections of objects"
msgstr ""

#: ../../source/collections.rst:16
# c9f81033a1dd4f409e5ab9da3995386c
msgid "Composition"
msgstr ""

#: ../../source/collections.rst:18
# 826b1c69b9c740c1b1739490e80fe947
msgid "By now, you have seen several examples of composition. One of the first examples was using a method invocation as part of an expression.  Another example is the nested structure of statements; you can put an ``if`` statement within a ``while`` loop, within another ``if`` statement, and so on."
msgstr ""

#: ../../source/collections.rst:23
# 93db00fc250548e7b6d191a21d3c44ca
msgid "Having seen this pattern, and having learned about lists and objects, you should not be surprised to learn that you can create lists of objects. You can also create objects that contain lists (as attributes); you can create lists that contain lists; you can create objects that contain objects; and so on."
msgstr ""

#: ../../source/collections.rst:28
# 443bf08750a84ee1943b91258629256c
msgid "In this chapter and the next, we will look at some examples of these combinations, using ``Card`` objects as an example."
msgstr ""

#: ../../source/collections.rst:33
# e143e35d2b2244d883d95bd429b755f6
msgid "``Card`` objects"
msgstr ""

#: ../../source/collections.rst:35
# 68164d35648e4d44b40301fb0ce46d5a
msgid "If you are not familiar with common playing cards, now would be a good time to get a deck, or else this chapter might not make much sense.  There are fifty-two cards in a deck, each of which belongs to one of four suits and one of thirteen ranks. The suits are Spades, Hearts, Diamonds, and Clubs (in descending order in bridge). The ranks are Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, and King. Depending on the game that you are playing, the rank of Ace may be higher than King or lower than 2. The rank is sometimes called the face-value of the card."
msgstr ""

#: ../../source/collections.rst:44
# b603de453dff40c6ad3207053fdf50ed
msgid "If we want to define a new object to represent a playing card, it is obvious what the attributes should be: ``rank`` and ``suit``. It is not as obvious what type the attributes should be. One possibility is to use strings containing words like ``\"Spade\"`` for suits and ``\"Queen\"`` for ranks. One problem with this implementation is that it would not be easy to compare cards to see which had a higher rank or suit."
msgstr ""

#: ../../source/collections.rst:51
# 2fd2f573f9cc4a4e8ce9cd64c42ac213
msgid "An alternative is to use integers to **encode** the ranks and suits.  By encode, we do not mean what some people think, which is to encrypt or translate into a secret code. What a computer scientist means by encode is to define a mapping between a sequence of numbers and the items I want to represent. For example:"
msgstr ""

#: ../../source/collections.rst:64
# 57212c0c066241e9bbc1be43fc4ff5ca
msgid "An obvious feature of this mapping is that the suits map to integers in order, so we can compare suits by comparing integers. The mapping for ranks is fairly obvious; each of the numerical ranks maps to the corresponding integer, and for face cards:"
msgstr ""

#: ../../source/collections.rst:75
# 413a52b9bd2347ccb606bf15ef7e1b20
msgid "The reason we are using mathematical notation for these mappings is that they are not part of the Python program. They are part of the program design, but they never appear explicitly in the code. The class definition for the ``Card`` type looks like this:"
msgstr ""

#: ../../source/collections.rst:88
# 092f5fbcac4346a0919bb547213a2762
msgid "As usual, we provide an initialization method that takes an optional parameter for each attribute."
msgstr ""

#: ../../source/collections.rst:91
# 72e9664ad43c454e86c73e07f67966d5
msgid "To create some objects, representing say the 3 of Clubs and the Jack of Diamonds, use these commands:"
msgstr ""

#: ../../source/collections.rst:99
# f6c0d483e97f4eab93b2a1efaa3697a8
msgid "In the first case above, for example, the first argument, ``0``, represents the suit Clubs."
msgstr ""

#: ../../source/collections.rst:103
# 4c08b67eb33f4a10a96bbed22fc2a0a7
msgid "Class attributes and the ``__str__`` method"
msgstr ""

#: ../../source/collections.rst:105
# c6002cdd2ff84c27ad7b2b5f503c1867
msgid "In order to print ``Card`` objects in a way that people can easily read, we want to map the integer codes onto words. A natural way to do that is with lists of strings. We assign these lists to **class attributes** at the top of the class definition:"
msgstr ""

#: ../../source/collections.rst:125
# 41d402156e764c34825332d66a46e333
msgid "A class attribute is defined outside of any method, and it can be accessed from any of the methods in the class."
msgstr ""

#: ../../source/collections.rst:128
# 6d51514b452940fbaf3d0347a51d3bd7
msgid "Inside ``__str__``, we can use ``suits`` and ``ranks`` to map the numerical values of ``suit`` and ``rank`` to strings. For example, the expression ``self.suits[self.suit]`` means use the attribute ``suit`` from the object ``self`` as an index into the class attribute named ``suits``, and select the appropriate string."
msgstr ""

#: ../../source/collections.rst:134
# f770d71c7f4f437290d967313ed3d9a8
msgid "The reason for the ``\"narf\"`` in the first element in ``ranks`` is to act as a place keeper for the zero-eth element of the list, which will never be used. The only valid ranks are 1 to 13. This wasted item is not entirely necessary. We could have started at 0, as usual, but it is less confusing to encode the rank 2 as integer 2, 3 as 3, and so on."
msgstr ""

#: ../../source/collections.rst:140
# 66187413ec5b4a5a9b64a15b9f08c353
msgid "With the methods we have so far, we can create and print cards:"
msgstr ""

#: ../../source/collections.rst:148
# 6ca42a09f97a40f7a47959cd0ef489ab
msgid "Class attributes like ``suits`` are shared by all ``Card`` objects. The advantage of this is that we can use any ``Card`` object to access the class attributes:"
msgstr ""

#: ../../source/collections.rst:160
# ecf9ee8143fc468e8801811930de743c
msgid "Because every ``Card`` instance references the same class attribute, we have an aliasing situation.  The disadvantage is that if we modify a class attribute, it affects every instance of the class. For example, if we decide that Jack of Diamonds should really be called Jack of Swirly Whales, we could do this:"
msgstr ""

#: ../../source/collections.rst:171
# 0e8f903ed12f482dad672f80ecedea3c
msgid "The problem is that *all* of the Diamonds just became Swirly Whales:"
msgstr ""

#: ../../source/collections.rst:178
# 759dbfa2e71146b991ba59a36634f2bf
msgid "It is usually not a good idea to modify class attributes."
msgstr ""

#: ../../source/collections.rst:182
# 283de96e8c7a4cef963d584be4d79a9a
msgid "Comparing cards"
msgstr ""

#: ../../source/collections.rst:184
# 8c26a154bd7f4bd6ac550e9284603d68
msgid "For primitive types, there are six relational operators ( ``<``, ``>``, ``==``, etc.) that compare values and determine when one is greater than, less than, or equal to another.   If you want your own types to be comparable using the syntax of these relational operators, you need to define six corresponding special methods in your class."
msgstr ""

#: ../../source/collections.rst:190
# 76d3a82bc40b4285bb2f2513484fcf12
msgid "We'd like to start with a single method named ``cmp`` that houses the logic of ordering. By convention, a comparison method takes two parameters, ``self`` and ``other``, and returns 1 if the first object is greater, -1 if the second object is greater, and 0 if they are equal to each other."
msgstr ""

#: ../../source/collections.rst:195
# c19aff8f607a4a358126aedc7c43ac5f
msgid "Some types are completely ordered, which means that you can compare any two elements and tell which is bigger. For example, the integers and the floating-point numbers are completely ordered. Some types are unordered, which means that there is no meaningful way to say that one element is bigger than another. For example, the fruits are unordered, which is why you cannot compare apples and oranges, and you cannot meaningfully order a collection of images, or a collection of cellphones."
msgstr ""

#: ../../source/collections.rst:203
# 5b8d416a22a642889ba85c7ffc5233f8
msgid "Playing cards are partially ordered, which means that sometimes you can compare cards and sometimes not. For example, you know that the 3 of Clubs is higher than the 2 of Clubs, and the 3 of Diamonds is higher than the 3 of Clubs. But which is better, the 3 of Clubs or the 2 of Diamonds? One has a higher rank, but the other has a higher suit."
msgstr ""

#: ../../source/collections.rst:209
# 009da197fd374bc5b6e5f4befeb945e7
msgid "In order to make cards comparable, you have to decide which is more important, rank or suit. To be honest, the choice is arbitrary. For the sake of choosing, we will say that suit is more important, because a new deck of cards comes sorted with all the Clubs together, followed by all the Diamonds, and so on."
msgstr ""

#: ../../source/collections.rst:214
# 3c1dcdbbbb6a46258df2d9b9c41d077b
msgid "With that decided, we can write ``cmp``:"
msgstr ""

#: ../../source/collections.rst:229
# f4c75fb21724440ea06f931d331e2927
msgid "In this ordering, Aces appear lower than Deuces (2s)."
msgstr ""

#: ../../source/collections.rst:231
# 3d996f4a34284dd191aac239461a3e11
msgid "Now, we can define the six special methods that do the overloading of each of the relational operators for us:"
msgstr ""

#: ../../source/collections.rst:255
# e39c356939a7405ebe5990061f464df6
msgid "With this machinery in place, the relational operators now work as we'd like them to:"
msgstr ""

#: ../../source/collections.rst:269
# 5e108b8ff6d5433aa7d4e224dc6a0f4b
msgid "Decks"
msgstr ""

#: ../../source/collections.rst:271
# 30756a0f9efa496287bb5fcfee177178
msgid "Now that we have objects to represent ``Card``\\s, the next logical step is to define a class to represent a ``Deck``. Of course, a deck is made up of cards, so each ``Deck`` object will contain a list of cards as an attribute.  Many card games will need at least two different decks --- a red deck and a blue deck."
msgstr ""

#: ../../source/collections.rst:276
# 690b53038f494d348fbe752a4663a987
msgid "The following is a class definition for the ``Deck`` class. The initialization method creates the attribute ``cards`` and generates the standard pack of fifty-two cards:"
msgstr ""

#: ../../source/collections.rst:290
# be25f55331954be8823daff34a62dea9
msgid "The easiest way to populate the deck is with a nested loop. The outer loop enumerates the suits from 0 to 3. The inner loop enumerates the ranks from 1 to 13. Since the outer loop iterates four times, and the inner loop iterates thirteen times, the total number of times the body is executed is fifty-two (thirteen times four). Each iteration creates a new instance of ``Card`` with the current suit and rank, and appends that card to the ``cards`` list."
msgstr ""

#: ../../source/collections.rst:297
# 833ca5b7031641b39bf8f9841fb84163
msgid "With this in place, we can instantiate some decks:"
msgstr ""

#: ../../source/collections.rst:307
# e26045468ee64ab2bf7e649b33553f97
msgid "Printing the deck"
msgstr ""

#: ../../source/collections.rst:309
# 88730c9908184bdda8ac45793b0bac19
msgid "As usual, when we define a new type we want a method that prints the contents of an instance. To print a ``Deck``, we traverse the list and print each ``Card``:"
msgstr ""

#: ../../source/collections.rst:322
# eb35e5b2910a468ab215f1f12da5f423
msgid "Here, and from now on, the ellipsis ( ``...``) indicates that we have omitted the other methods in the class."
msgstr ""

#: ../../source/collections.rst:325
# f4aef909eb4947ecb9d403efe9a2c963
msgid "As an alternative to ``print_deck``, we could write a ``__str__`` method for the ``Deck`` class. The advantage of ``__str__`` is that it is more flexible. Rather than just printing the contents of the object, it generates a string representation that other parts of the program can manipulate before printing, or store for later use."
msgstr ""

#: ../../source/collections.rst:331
# e1ab70d7b11a4296838c227dd68af4f2
msgid "Here is a version of ``__str__`` that returns a string representation of a ``Deck``. To add a bit of pizzazz, it arranges the cards in a cascade where each card is indented one space more than the previous card:"
msgstr ""

#: ../../source/collections.rst:347
# da993192920a46c689ac00327b924d12
msgid "This example demonstrates several features. First, instead of traversing ``self.cards`` and assigning each card to a variable, we are using ``i`` as a loop variable and an index into the list of cards."
msgstr ""

#: ../../source/collections.rst:351
# 9975397296df4242a0ffeecb20b8f35a
msgid "Second, we are using the string multiplication operator to indent each card by one more space than the last. The expression ``\" \" * i`` yields a number of spaces equal to the current value of ``i``."
msgstr ""

#: ../../source/collections.rst:355
# 4a3fc118c832407aba47914c2fb23f6b
msgid "Third, instead of using the ``print`` command to print the cards, we use the ``str`` function. Passing an object as an argument to ``str`` is equivalent to invoking the ``__str__`` method on the object."
msgstr ""

#: ../../source/collections.rst:359
# e231e2744f4c44bc8ff760d38edc4676
msgid "Finally, we are using the variable ``s`` as an **accumulator**.  Initially, ``s`` is the empty string. Each time through the loop, a new string is generated and concatenated with the old value of ``s`` to get the new value. When the loop ends, ``s`` contains the complete string representation of the ``Deck``, which looks like this:"
msgstr ""

#: ../../source/collections.rst:387
# 8420c75bcaba47d58ccf5f1bf5a41521
msgid "And so on. Even though the result appears on 52 lines, it is one long string that contains newlines."
msgstr ""

#: ../../source/collections.rst:392
# 0212946b1b344488932945ad94046ef8
msgid "Shuffling the deck"
msgstr ""

#: ../../source/collections.rst:394
# 265476d466a843849305bba0fcb44c9a
msgid "If a deck is perfectly shuffled, then any card is equally likely to appear anywhere in the deck, and any location in the deck is equally likely to contain any card."
msgstr ""

#: ../../source/collections.rst:398
# 0e79ddec95fc4032a52429483a19e5ee
msgid "To shuffle the deck, we will use the ``randrange`` function from the ``random`` module. With two integer arguments, ``a`` and ``b``, ``randrange`` chooses a random integer in the range ``a <= x < b``. Since the upper bound is strictly less than ``b``, we can use the length of a list as the second parameter, and we are guaranteed to get a legal index. For example, if ``rng`` has already been instantiated as a random number source, this expression chooses the index of a random card in a deck:"
msgstr ""

#: ../../source/collections.rst:411
# addcc6ed647e4faa87428c53f5a69c70
msgid "An easy way to shuffle the deck is by traversing the cards and swapping each card with a randomly chosen one. It is possible that the card will be swapped with itself, but that is fine. In fact, if we precluded that possibility, the order of the cards would be less than entirely random:"
msgstr ""

#: ../../source/collections.rst:429
# e5a3e7ccd61a4ee9931f3cc853ad1b52
msgid "Rather than assume that there are fifty-two cards in the deck, we get the actual length of the list and store it in ``num_cards``."
msgstr ""

#: ../../source/collections.rst:432
# 7c1d59f728f44321ac25714fccb84d94
msgid "For each card in the deck, we choose a random card from among the cards that haven't been shuffled yet. Then we swap the current card (``i``) with the selected card (``j``). To swap the cards we use a tuple assignment:"
msgstr ""

#: ../../source/collections.rst:441
# 0606fc159d2c447cb5a9b8fb5bfe0375
msgid "While this is a good shuffling method, a random number generator object also has a ``shuffle`` method that can shuffle elements in a list, in place. So we could rewrite this function to use the one provided for us:"
msgstr ""

#: ../../source/collections.rst:457
# 53f0cf4a85ee428ca30946e793f26498
msgid "Removing and dealing cards"
msgstr ""

#: ../../source/collections.rst:459
# 5a33b5ad156d4861ac9062cf32d2425d
msgid "Another method that would be useful for the ``Deck`` class is ``remove``, which takes a card as a parameter, removes it, and returns ``True`` if the card was in the deck and ``False`` otherwise:"
msgstr ""

#: ../../source/collections.rst:477
# a09a3c05da734b5ebe7b161bcff32259
msgid "The ``in`` operator returns ``True`` if the first operand is in the second. If the first operand is an object, Python uses the object's ``__eq__`` method to determine equality with items in the list. Since the ``__eq__`` we provided in the ``Card`` class checks for deep equality, the ``remove`` method checks for deep equality."
msgstr ""

#: ../../source/collections.rst:483
# d66243bdaab346b1af4f2bc676d0f7e8
msgid "To deal cards, we want to remove and return the top card. The list method ``pop`` provides a convenient way to do that:"
msgstr ""

#: ../../source/collections.rst:494
# c54007cfe2a545dd87863cef3f73a07a
msgid "Actually, ``pop`` removes the *last* card in the list, so we are in effect dealing from the bottom of the deck."
msgstr ""

#: ../../source/collections.rst:497
# e81ac77e1359476684c66ea5ba9ed7c0
msgid "One more operation that we are likely to want is the boolean function ``is_empty``, which returns ``True`` if the deck contains no cards:"
msgstr ""

#: ../../source/collections.rst:510
# e5f7cd93152b4f99ad3ea7731d493515
msgid "Glossary"
msgstr ""

#: ../../source/collections.rst:515
# cd01a9700e8c4ad08d8949872e4e237b
msgid "To represent one type of value using another type of value by constructing a mapping between them."
msgstr ""

#: ../../source/collections.rst:519
# 0f145742c40b4de481b426178de07a06
msgid "A variable that is defined inside a class definition but outside any method. Class attributes are accessible from any method in the class and are shared by all instances of the class."
msgstr ""

#: ../../source/collections.rst:524
# b5e200dc51d54aa8bfe734d6e0288f56
msgid "A variable used in a loop to accumulate a series of values, such as by concatenating them onto a string or adding them to a running sum."
msgstr ""

#: ../../source/collections.rst:529
# 620251b5d4fe4b76a21e3098d69e0ba9
msgid "Exercises"
msgstr ""

#: ../../source/collections.rst:531
# 8ef28460ba644813840bbc43bab21662
msgid "Modify ``cmp`` so that Aces are ranked higher than Kings."
msgstr ""

